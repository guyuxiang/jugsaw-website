{"version":3,"file":"1d725bd1-f6ec925bb24aab2dd716.js","mappings":"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","sources":["webpack://ethereum-org-website/./src/components/EthExchanges.tsx"],"sourcesContent":["import React, { useState } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { IGatsbyImageData } from \"gatsby-plugin-image\"\nimport { useIntl } from \"react-intl\"\nimport styled from \"@emotion/styled\"\n\nimport CardList from \"./CardList\"\nimport Link from \"./Link\"\nimport Emoji from \"./OldEmoji\"\nimport Translation from \"./Translation\"\nimport { StyledSelect as Select } from \"./SharedStyledComponents\"\n\nimport { getLocaleTimestamp } from \"../utils/time\"\nimport { trackCustomEvent } from \"../utils/matomo\"\nimport { translateMessageId } from \"../utils/translations\"\nimport { getImage, ImageDataLike } from \"../utils/image\"\nimport { Lang } from \"../utils/languages\"\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst ListContainer = styled.div`\n  margin-top: 4rem;\n  flex: 1 1 50%;\n  @media (max-width: ${(props) => props.theme.breakpoints.m}) {\n    flex: 1 1 100%;\n  }\n`\n\nconst ResultsContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  max-width: 876px;\n\n  ${ListContainer}:first-child {\n    margin-right: 1.5rem;\n  }\n\n  @media (max-width: ${(props) => props.theme.breakpoints.m}) {\n    flex-wrap: wrap;\n    ${ListContainer}:first-child {\n      margin-right: 0;\n    }\n  }\n`\n\nconst EmptyStateContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-top: 4rem;\n`\n\nconst EmptyStateContainerSingle = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-top: 1.5rem;\n`\n\nconst SuccessContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 1rem;\n`\n\nconst EmptyStateText = styled.p`\n  margin: 2rem;\n  font-size: 1.25rem;\n  max-width: 450px;\n  text-align: center;\n`\n\nconst EmptyStateTextSingle = styled.p`\n  max-width: 450px;\n  margin-bottom: 4rem;\n`\n\nconst Intro = styled.p`\n  font-size: 1rem;\n  line-height: 140%;\n  margin-top: 0rem;\n  margin-bottom: 2rem;\n  max-width: 640px;\n  text-align: center;\n`\n\nconst Disclaimer = styled.p`\n  width: 100%;\n  max-width: 876px;\n  margin-top: 4rem;\n  margin-bottom: 0;\n`\n\nconst StyledSelect = styled(Select)`\n  max-width: 640px;\n`\n\nconst NoResults = ({ children }) => (\n  <EmptyStateContainer>\n    <Emoji text=\":crying_face:\" size={5} />\n    <EmptyStateText>\n      {children}{\" \"}\n      <Link to=\"mailto:website@ethereum.org\">website@ethereum.org</Link>.\n    </EmptyStateText>\n  </EmptyStateContainer>\n)\n\nconst NoResultsSingle = ({ children }) => (\n  <EmptyStateContainerSingle>\n    <EmptyStateTextSingle>\n      {children}{\" \"}\n      <Link to=\"mailto:website@ethereum.org\">website@ethereum.org</Link>.\n    </EmptyStateTextSingle>\n    <Emoji text=\":crying_face:\" size={5} />\n  </EmptyStateContainerSingle>\n)\n\nexport const cardListImage = graphql`\n  fragment cardListImage on File {\n    childImageSharp {\n      gatsbyImageData(\n        width: 20\n        layout: FIXED\n        placeholder: BLURRED\n        quality: 100\n      )\n    }\n  }\n`\n\ntype StringBoolean = \"TRUE\" | \"FALSE\"\n\ntype ExchangeName =\n  | \"binance\"\n  | \"binanceus\"\n  | \"bitbuy\"\n  | \"bitfinex\"\n  | \"bitflyer\"\n  | \"bitkub\"\n  | \"bitso\"\n  | \"bittrex\"\n  | \"bitvavo\"\n  | \"bybit\"\n  | \"coinbase\"\n  | \"coinmama\"\n  | \"coinspot\"\n  | \"cryptocom\"\n  | \"easycrypto\"\n  | \"gateio\"\n  | \"gemini\"\n  | \"huobiglobal\"\n  | \"itezcom\"\n  | \"kraken\"\n  | \"kucoin\"\n  | \"mtpelerin\"\n  | \"moonpay\"\n  | \"okx\"\n  | \"rain\"\n  | \"shakepay\"\n  | \"wazirx\"\n\ntype WalletProviderName = \"simplex\" | \"moonpay\" | \"wyre\"\n\ntype ExchangeByCountry = {\n  value: string\n  label: string\n  exchanges: { [key in ExchangeName]: StringBoolean }\n}\n\ninterface Exchange {\n  name: string\n  url: string\n  image: ImageDataLike | null\n  usaExceptions: Array<string>\n}\n\ntype Exchanges = Record<ExchangeName, Exchange>\n\ninterface Wallet {\n  url: string\n  platform: string\n  image: ImageDataLike | null\n  isUsaOnly?: boolean\n}\n\ninterface WalletProvider {\n  usaExceptions: Array<string>\n  wallets: {\n    [key: string]: Wallet\n  }\n}\n\ntype WalletProviders = Record<WalletProviderName, WalletProvider>\n\ninterface FilteredData {\n  title: string\n  description: string | null\n  link: string\n  image: IGatsbyImageData\n  alt: string\n}\n\ninterface State {\n  selectedCountry?: ExchangeByCountry\n}\n\n// TODO move component into get-eth.js page?\nconst EthExchanges = () => {\n  const intl = useIntl()\n  const [state, setState] = useState<State>()\n\n  const placeholderString = translateMessageId(\n    \"page-get-eth-exchanges-search\",\n    intl\n  )\n  const data = useStaticQuery(graphql`\n    query EthExchanges {\n      exchangesByCountry: allExchangesByCountryCsv {\n        nodes {\n          binance\n          binanceus\n          bitbuy\n          bitfinex\n          bitflyer\n          bitkub\n          bitso\n          bittrex\n          bitvavo\n          bybit\n          coinbase\n          coinmama\n          coinspot\n          country\n          cryptocom\n          easycrypto\n          gateio\n          gemini\n          huobiglobal\n          itezcom\n          kraken\n          kucoin\n          moonpay\n          mtpelerin\n          okx\n          rain\n          shakepay\n          simplex\n          wazirx\n          wyre\n        }\n      }\n      timestamp: exchangesByCountryCsv {\n        parent {\n          ... on File {\n            id\n            name\n            fields {\n              gitLogLatestDate\n            }\n          }\n        }\n      }\n      argent: file(relativePath: { eq: \"wallets/argent.png\" }) {\n        ...cardListImage\n      }\n      binance: file(relativePath: { eq: \"exchanges/binance.png\" }) {\n        ...cardListImage\n      }\n      binanceus: file(relativePath: { eq: \"exchanges/binance.png\" }) {\n        ...cardListImage\n      }\n      bitbuy: file(relativePath: { eq: \"exchanges/bitbuy.png\" }) {\n        ...cardListImage\n      }\n      bitfinex: file(relativePath: { eq: \"exchanges/bitfinex.png\" }) {\n        ...cardListImage\n      }\n      bitflyer: file(relativePath: { eq: \"exchanges/bitflyer.png\" }) {\n        ...cardListImage\n      }\n      bitkub: file(relativePath: { eq: \"exchanges/bitkub.png\" }) {\n        ...cardListImage\n      }\n      bitso: file(relativePath: { eq: \"exchanges/bitso.png\" }) {\n        ...cardListImage\n      }\n      bittrex: file(relativePath: { eq: \"exchanges/bittrex.png\" }) {\n        ...cardListImage\n      }\n      bitvavo: file(relativePath: { eq: \"exchanges/bitvavo.png\" }) {\n        ...cardListImage\n      }\n      bybit: file(relativePath: { eq: \"exchanges/bybit.png\" }) {\n        ...cardListImage\n      }\n      coinbase: file(relativePath: { eq: \"exchanges/coinbase.png\" }) {\n        ...cardListImage\n      }\n      coinmama: file(relativePath: { eq: \"exchanges/coinmama.png\" }) {\n        ...cardListImage\n      }\n      coinspot: file(relativePath: { eq: \"exchanges/coinspot.png\" }) {\n        ...cardListImage\n      }\n      cryptocom: file(relativePath: { eq: \"exchanges/crypto.com.png\" }) {\n        ...cardListImage\n      }\n      easycrypto: file(relativePath: { eq: \"exchanges/easycrypto.png\" }) {\n        ...cardListImage\n      }\n      gateio: file(relativePath: { eq: \"exchanges/gateio.png\" }) {\n        ...cardListImage\n      }\n      gemini: file(relativePath: { eq: \"exchanges/gemini.png\" }) {\n        ...cardListImage\n      }\n      huobiglobal: file(relativePath: { eq: \"exchanges/huobiglobal.png\" }) {\n        ...cardListImage\n      }\n      imtoken: file(relativePath: { eq: \"wallets/imtoken.png\" }) {\n        ...cardListImage\n      }\n      itezcom: file(relativePath: { eq: \"exchanges/itezcom.png\" }) {\n        ...cardListImage\n      }\n      kraken: file(relativePath: { eq: \"exchanges/kraken.png\" }) {\n        ...cardListImage\n      }\n      kucoin: file(relativePath: { eq: \"exchanges/kucoin.png\" }) {\n        ...cardListImage\n      }\n      moonpay: file(relativePath: { eq: \"exchanges/moonpay.png\" }) {\n        ...cardListImage\n      }\n      mtpelerin: file(relativePath: { eq: \"exchanges/mtpelerin.png\" }) {\n        ...cardListImage\n      }\n      myetherwallet: file(relativePath: { eq: \"wallets/myetherwallet.png\" }) {\n        ...cardListImage\n      }\n      mycrypto: file(relativePath: { eq: \"wallets/mycrypto.png\" }) {\n        ...cardListImage\n      }\n      okx: file(relativePath: { eq: \"exchanges/okx.png\" }) {\n        ...cardListImage\n      }\n      rain: file(relativePath: { eq: \"exchanges/rain.png\" }) {\n        ...cardListImage\n      }\n      shakepay: file(relativePath: { eq: \"exchanges/shakepay.png\" }) {\n        ...cardListImage\n      }\n      squarelink: file(relativePath: { eq: \"wallets/squarelink.png\" }) {\n        ...cardListImage\n      }\n      trust: file(relativePath: { eq: \"wallets/trust.png\" }) {\n        ...cardListImage\n      }\n      wazirx: file(relativePath: { eq: \"exchanges/wazirx.png\" }) {\n        ...cardListImage\n      }\n    }\n  `)\n\n  const exchanges: Exchanges = {\n    binance: {\n      name: \"Binance\",\n      url: \"https://www.binance.com/en\",\n      image: data.binance,\n      usaExceptions: [],\n    },\n    binanceus: {\n      name: \"Binance US\",\n      url: \"https://www.binance.us/en/home\",\n      image: data.binance,\n      usaExceptions: [\"HI\", \"ID\", \"NY\", \"TX\", \"VT\"],\n    },\n    bitbuy: {\n      name: \"Bitbuy\",\n      url: \"https://bitbuy.ca/\",\n      image: data.bitbuy,\n      usaExceptions: [],\n    },\n    bitfinex: {\n      name: \"Bitfinex\",\n      url: \"https://www.bitfinex.com/\",\n      image: data.bitfinex,\n      usaExceptions: [],\n    },\n    bitflyer: {\n      name: \"bitFlyer\",\n      url: \"https://bitflyer.com/\",\n      image: data.bitflyer,\n      usaExceptions: [\"NV\", \"WV\"],\n    },\n    bitkub: {\n      name: \"Bitkub\",\n      url: \"https://www.bitkub.com/\",\n      image: data.bitkub,\n      usaExceptions: [],\n    },\n    bitso: {\n      name: \"Bitso\",\n      url: \"https://bitso.com/\",\n      image: data.bitso,\n      usaExceptions: [],\n    },\n    bittrex: {\n      name: \"Bittrex\",\n      url: \"https://global.bittrex.com/\",\n      image: data.bittrex,\n      usaExceptions: [\"CT\", \"HI\", \"NY\", \"NH\", \"TX\", \"VT\", \"VA\"],\n    },\n    bitvavo: {\n      name: \"Bitvavo\",\n      url: \"https://bitvavo.com/en/ethereum\",\n      image: data.bitvavo,\n      usaExceptions: [],\n    },\n    bybit: {\n      name: \"Bybit\",\n      url: \"https://www.bybit.com/\",\n      image: data.bybit,\n      usaExceptions: [],\n    },\n    coinbase: {\n      name: \"Coinbase\",\n      url: \"https://www.coinbase.com/\",\n      image: data.coinbase,\n      usaExceptions: [\"HI\"],\n    },\n    coinmama: {\n      name: \"Coinmama\",\n      url: \"https://www.coinmama.com/\",\n      image: data.coinmama,\n      usaExceptions: [\"CT\", \"FL\", \"IA\", \"NY\"],\n    },\n    coinspot: {\n      name: \"CoinSpot\",\n      url: \"https://www.coinspot.com.au/\",\n      image: data.coinspot,\n      usaExceptions: [],\n    },\n    cryptocom: {\n      name: \"Crypto.com\",\n      url: \"https://crypto.com/exchange/\",\n      image: data.cryptocom,\n      usaExceptions: [\"NY\"],\n    },\n    easycrypto: {\n      name: \"Easy Crypto\",\n      url: \"https://easycrypto.com/\",\n      image: data.easycrypto,\n      usaExceptions: [],\n    },\n    gateio: {\n      name: \"Gate.io\",\n      url: \"https://www.gate.io/\",\n      image: data.gateio,\n      usaExceptions: [],\n    },\n    huobiglobal: {\n      name: \"Huobi Global\",\n      url: \"https://huobi.com/\",\n      image: data.huobiglobal,\n      usaExceptions: [],\n    },\n    itezcom: {\n      name: \"Itez\",\n      url: \"https://itez.com/\",\n      image: data.itezcom,\n      usaExceptions: [],\n    },\n    kraken: {\n      name: \"Kraken\",\n      url: \"https://www.kraken.com/\",\n      image: data.kraken,\n      usaExceptions: [\"NY, WA\"],\n    },\n    kucoin: {\n      name: \"KuCoin\",\n      url: \"https://www.kucoin.com/\",\n      image: data.kucoin,\n      usaExceptions: [],\n    },\n    moonpay: {\n      name: \"MoonPay\",\n      url: \"https://www.moonpay.com/\",\n      image: data.moonpay,\n      usaExceptions: [\"VI\"],\n    },\n    mtpelerin: {\n      name: \"Mt Pelerin\",\n      url: \"https://www.mtpelerin.com/\",\n      image: data.mtpelerin,\n      usaExceptions: [],\n    },\n    okx: {\n      name: \"OKX\",\n      url: \"https://www.okx.com/\",\n      image: data.okx,\n      usaExceptions: [],\n    },\n    gemini: {\n      name: \"Gemini\",\n      url: \"https://gemini.com/\",\n      image: data.gemini,\n      usaExceptions: [\"HI\"],\n    },\n    rain: {\n      name: \"Rain\",\n      url: \"https://rain.bh\",\n      image: data.rain,\n      usaExceptions: [],\n    },\n    shakepay: {\n      name: \"Shakepay\",\n      url: \"https://shakepay.com\",\n      image: data.shakepay,\n      usaExceptions: [],\n    },\n    wazirx: {\n      name: \"WazirX\",\n      url: \"https://wazirx.com/\",\n      image: data.wazirx,\n      usaExceptions: [],\n    },\n  }\n\n  const walletProviders: WalletProviders = {\n    wyre: {\n      usaExceptions: [\"CT\", \"HI\", \"NY\", \"NH\", \"TX\", \"VT\", \"VA\"],\n      wallets: {\n        Squarelink: {\n          url: \"https://squarelink.com/\t\",\n          platform: \"Web\",\n          image: data.squarelink,\n        },\n      },\n    },\n    moonpay: {\n      usaExceptions: [\n        \"CT\",\n        \"HI\",\n        \"IA\",\n        \"KS\",\n        \"KY\",\n        \"MS\",\n        \"NE\",\n        \"NM\",\n        \"NY\",\n        \"RI\",\n        \"WV\",\n      ],\n      wallets: {\n        Argent: {\n          url: \"https://www.argent.xyz/\t\",\n          platform: \"Mobile\",\n          image: data.argent,\n        },\n        imToken: {\n          url: \"https://token.im/ \",\n          platform: \"Mobile\",\n          image: data.imtoken,\n        },\n        Trust: {\n          url: \"https://trustwallet.com/\t\",\n          platform: \"Mobile\",\n          image: data.trust,\n        },\n        MyCrypto: {\n          url: \"https://app.mycrypto.com\",\n          platform: \"Web\",\n          image: data.mycrypto,\n        },\n      },\n    },\n    simplex: {\n      usaExceptions: [\"AL\", \"AK\", \"NM\", \"HI\", \"NV\", \"WA\", \"VT\", \"NY\"],\n      wallets: {\n        MyEtherWallet: {\n          url: \"https://www.myetherwallet.com/\",\n          platform: \"Mobile/Web\",\n          image: data.myetherwallet,\n        },\n      },\n    },\n  }\n\n  const lastUpdated = getLocaleTimestamp(\n    intl.locale as Lang,\n    data.timestamp.parent.fields.gitLogLatestDate\n  )\n\n  const handleSelectChange = (selectedOption: ExchangeByCountry) => {\n    trackCustomEvent({\n      eventCategory: `Country input`,\n      eventAction: `Selected`,\n      eventName: selectedOption.value,\n    })\n    setState({ selectedCountry: selectedOption })\n  }\n\n  // Add `value` & `label` for Select component\n  const exchangesByCountry: Array<ExchangeByCountry> =\n    data.exchangesByCountry.nodes\n      .map((node) => {\n        return {\n          value: node.country,\n          label: node.country,\n          exchanges: node,\n        }\n      })\n      .sort((a, b) => a.value.localeCompare(b.value))\n\n  const exchangesArray = Object.keys(exchanges) as Array<ExchangeName>\n  const walletProvidersArray = Object.keys(\n    walletProviders\n  ) as Array<WalletProviderName>\n\n  // Construct arrays for CardList\n  let filteredExchanges: Array<FilteredData> = []\n  let filteredWalletProviders: Array<WalletProviderName> = []\n  let filteredWallets: Array<FilteredData> = []\n\n  const hasSelectedCountry = !!state?.selectedCountry?.value\n  if (hasSelectedCountry) {\n    // Filter to exchanges that serve selected Country\n    filteredExchanges = exchangesArray\n      .filter(\n        (exchange) => state?.selectedCountry?.exchanges[exchange] === \"TRUE\"\n      )\n      // Format array for <CardList/>\n      .map((exchange) => {\n        // Add state exceptions if Country is USA\n        let description: string | null = null\n        if (\n          state?.selectedCountry?.value ===\n          translateMessageId(\"page-get-eth-exchanges-usa\", intl)\n        ) {\n          const exceptions = exchanges[exchange].usaExceptions\n          if (exceptions.length > 0) {\n            description = `${translateMessageId(\n              \"page-get-eth-exchanges-except\",\n              intl\n            )} ${exceptions.join(\", \")}`\n          }\n        }\n        return {\n          title: exchanges[exchange].name,\n          description,\n          link: exchanges[exchange].url,\n          image: getImage(exchanges[exchange].image)!,\n          alt: \"\",\n        }\n      })\n      .sort((a, b) => a.title.localeCompare(b.title))\n\n    // Filter to wallet providers that serve selected Country\n    filteredWalletProviders = walletProvidersArray.filter(\n      (provider) => state?.selectedCountry?.exchanges[provider] === \"TRUE\"\n    )\n  }\n  if (filteredWalletProviders.length) {\n    // Construct wallets based on the provider\n    filteredWallets = filteredWalletProviders\n      .reduce<Array<FilteredData>>((res, currentProvider) => {\n        const wallets = Object.keys(walletProviders[currentProvider].wallets)\n\n        const flattenWallets = wallets.reduce<Array<FilteredData>>(\n          (result, currentWallet) => {\n            const walletObject =\n              walletProviders[currentProvider].wallets[currentWallet]\n            // Add state exceptions if Country is USA\n            let description: string | null = null\n            if (\n              state?.selectedCountry?.value ===\n              translateMessageId(\"page-get-eth-exchanges-usa\", intl)\n            ) {\n              const exceptions = walletProviders[currentProvider].usaExceptions\n              if (exceptions.length > 0) {\n                description = `${translateMessageId(\n                  \"page-get-eth-exchanges-except\",\n                  intl\n                )} ${exceptions.join(\", \")}`\n              }\n              // Filter out wallets that only service USA\n            } else if (walletObject.isUsaOnly) {\n              return result\n            }\n            return result.concat({\n              title: currentWallet,\n              description,\n              link: walletObject.url,\n              image: getImage(walletObject.image)!,\n              alt: \"\",\n            })\n          },\n          []\n        )\n        // Flatten data into single array for <CardList/>\n        return res.concat(flattenWallets)\n      }, [])\n      .sort((a, b) => a.title.localeCompare(b.title))\n  }\n\n  const hasExchangeResults = filteredExchanges.length > 0\n  const hasWalletResults = filteredWallets.length > 0\n\n  return (\n    <Container>\n      <h2>\n        <Translation id=\"page-get-eth-exchanges-header\" />\n      </h2>\n      <Intro>\n        <Translation id=\"page-get-eth-exchanges-intro\" />\n      </Intro>\n      <StyledSelect\n        aria-label={translateMessageId(\"page-get-eth-exchanges-header\", intl)}\n        className=\"react-select-container\"\n        classNamePrefix=\"react-select\"\n        options={exchangesByCountry}\n        onChange={handleSelectChange}\n        placeholder={placeholderString}\n      />\n      {!hasSelectedCountry && (\n        <EmptyStateContainer>\n          <Emoji text=\":world_map:\" size={5} />\n          <EmptyStateText>\n            <Translation id=\"page-get-eth-exchanges-empty-state-text\" />\n          </EmptyStateText>\n        </EmptyStateContainer>\n      )}\n      {/* No results */}\n      {hasSelectedCountry && !hasExchangeResults && !hasWalletResults && (\n        <ResultsContainer>\n          <NoResults>\n            <Translation id=\"page-get-eth-exchanges-no-exchanges-or-wallets\" />\n          </NoResults>\n        </ResultsContainer>\n      )}\n      {/* Has results */}\n      {(hasExchangeResults || hasWalletResults) && (\n        <>\n          <ResultsContainer>\n            <ListContainer>\n              <h3>\n                <Translation id=\"page-get-eth-exchanges-header-exchanges\" />\n              </h3>\n              {hasExchangeResults && (\n                <SuccessContainer>\n                  <p>\n                    <Translation id=\"page-get-eth-exchanges-success-exchange\" />\n                  </p>\n                  <CardList content={filteredExchanges} />\n                </SuccessContainer>\n              )}\n              {!hasExchangeResults && (\n                <NoResultsSingle>\n                  <Translation id=\"page-get-eth-exchanges-no-exchanges\" />\n                </NoResultsSingle>\n              )}\n            </ListContainer>\n            <ListContainer>\n              <h3>\n                <Translation id=\"page-get-eth-exchanges-header-wallets\" />\n              </h3>\n\n              {hasWalletResults && (\n                <SuccessContainer>\n                  <p>\n                    <Translation id=\"page-get-eth-exchanges-success-wallet-paragraph\" />{\" \"}\n                    <Link to=\"/wallets/\">\n                      <Translation id=\"page-get-eth-exchanges-success-wallet-link\" />\n                    </Link>\n                    .\n                  </p>\n                  <CardList content={filteredWallets} />\n                </SuccessContainer>\n              )}\n              {!hasWalletResults && (\n                <NoResultsSingle>\n                  <Translation id=\"page-get-eth-exchanges-no-wallets\" />\n                </NoResultsSingle>\n              )}\n            </ListContainer>\n          </ResultsContainer>\n          <Disclaimer>\n            <Translation id=\"page-get-eth-exchanges-disclaimer\" />{\" \"}\n            <Link to=\"mailto:website@ethereum.org\">website@ethereum.org</Link>.{\" \"}\n            <Translation id=\"page-find-wallet-last-updated\" />{\" \"}\n            <strong>{lastUpdated}</strong>\n          </Disclaimer>\n        </>\n      )}\n    </Container>\n  )\n}\n\nexport default EthExchanges\n"],"names":["Container","ListContainer","props","theme","breakpoints","m","ResultsContainer","EmptyStateContainer","EmptyStateContainerSingle","SuccessContainer","EmptyStateText","EmptyStateTextSingle","Intro","Disclaimer","StyledSelect","Select","NoResults","_ref","children","___EmotionJSX","Emoji","text","size","Link","to","NoResultsSingle","_ref2","intl","useIntl","state","setState","useState","placeholderString","translateMessageId","data","useStaticQuery","exchanges","binance","name","url","image","usaExceptions","binanceus","bitbuy","bitfinex","bitflyer","bitkub","bitso","bittrex","bitvavo","bybit","coinbase","coinmama","coinspot","cryptocom","easycrypto","gateio","huobiglobal","itezcom","kraken","kucoin","moonpay","mtpelerin","okx","gemini","rain","shakepay","wazirx","walletProviders","wyre","wallets","Squarelink","platform","squarelink","Argent","argent","imToken","imtoken","Trust","trust","MyCrypto","mycrypto","simplex","MyEtherWallet","myetherwallet","lastUpdated","getLocaleTimestamp","locale","timestamp","parent","fields","gitLogLatestDate","exchangesByCountry","nodes","map","node","value","country","label","sort","a","b","localeCompare","exchangesArray","Object","keys","walletProvidersArray","filteredExchanges","filteredWalletProviders","filteredWallets","hasSelectedCountry","selectedCountry","_state$selectedCountr","filter","exchange","_state$selectedCountr2","description","_state$selectedCountr3","exceptions","length","join","title","link","getImage","alt","provider","_state$selectedCountr4","reduce","res","currentProvider","flattenWallets","result","currentWallet","walletObject","_state$selectedCountr5","isUsaOnly","concat","hasExchangeResults","hasWalletResults","Translation","id","className","classNamePrefix","options","onChange","selectedOption","trackCustomEvent","eventCategory","eventAction","eventName","placeholder","CardList","content"],"sourceRoot":""}