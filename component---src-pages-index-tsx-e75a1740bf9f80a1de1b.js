"use strict";(self.webpackChunkethereum_org_website=self.webpackChunkethereum_org_website||[]).push([[6691],{23069:function(e,n,t){var a=t(40517),o=t(70917);n.Z=e=>{let{children:n,isOpen:t,setIsOpen:r,title:i}=e;return(0,o.tZ)(a.u_,{isOpen:t,scrollBehavior:"inside",variant:"code",onClose:()=>r(!1)},(0,o.tZ)(a.ZA,null),(0,o.tZ)(a.hz,null,(0,o.tZ)(a.xB,null,i),(0,o.tZ)(a.ol,null),(0,o.tZ)(a.fe,null,n)))}},12465:function(e,n,t){var a=t(18817);t(38032),t(15697),t(26679),t(47070);(0,a.Z)("div",{target:"eponpbj13"})("background-color:",(e=>e.theme.colors.background),";box-shadow:",(e=>e.theme.colors.tableBoxShadow),";width:100%;margin-bottom:2rem;border-radius:2px;"),(0,a.Z)("div",{target:"eponpbj12"})("background:",(e=>e.theme.colors.ednBackground),";padding:1rem;border-bottom:1px solid ",(e=>e.theme.colors.text),";font-weight:600;display:flex;flex-direction:row-reverse;align-items:center;justify-content:space-between;"),(0,a.Z)("div",{target:"eponpbj10"})("cursor:pointer;text-decoration:none;display:flex;justify-content:space-between;color:",(e=>e.theme.colors.text),"!important;box-shadow:0 1px 1px ",(e=>e.theme.colors.tableItemBoxShadow),";margin-bottom:1px;padding:1rem;width:100%;color:#000000;&:hover{box-shadow:0 0 1px ",(e=>e.theme.colors.primary),";background:",(e=>e.theme.colors.primary100),";color:",(e=>e.theme.colors.black),"!important;}"),(0,a.Z)("div",{target:"eponpbj8"})(""),(0,a.Z)("div",{target:"eponpbj7"})("font-size:",(e=>e.theme.fontSizes.s),";margin-bottom:0;opacity:0.7;"),(0,a.Z)("div",{target:"eponpbj6"})({name:"mnjd6e",styles:"flex:1 1 75%;display:flex;flex-direction:column;margin-right:2rem"}),(0,a.Z)("div",{target:"eponpbj5"})({name:"v9kvyo",styles:"flex:1 0 25%;display:flex;align-items:center;margin-right:1rem;flex-wrap:wrap"}),(0,a.Z)("div",{target:"eponpbj3"})("border-radius:64px;background:",(e=>e.theme.colors.fail300),";margin-right:0.5rem;width:12px;height:12px;"),(0,a.Z)("div",{target:"eponpbj2"})("border-radius:64px;background:",(e=>e.theme.colors.gridYellow),";margin-right:0.5rem;width:12px;height:12px;"),(0,a.Z)("div",{target:"eponpbj1"})("border-radius:64px;background:",(e=>e.theme.colors.success300),";width:12px;height:12px;"),(0,a.Z)("div",{target:"eponpbj0"})("display:flex;@media (max-width: ",(e=>e.theme.breakpoints.s),"){display:none;}")},49570:function(e,n,t){t.d(n,{Y:function(){return o}});var a=t(67294);const o=()=>{(0,a.useEffect)((()=>{console.log("\nThe Merge is complete.\n\n🐼🐼🐼🐼🐼🐼🐼🐼🐼🐼🐼🐼🐼🐼\n\nWelcome to a greener Ethereum.\n\n🌳🌳🌳🌳🌳🌳🌳🌳🌳🌳🌳🌳🌳🌳\n\nCome help us build it: https://ethereum.org/en/contributing\n    ")}))}},52713:function(e,n){n.Z='const ethers = require("ethers")\n\n// Create a wallet instance from a mnemonic...\nconst mnemonic =\n  "announce room limb pattern dry unit scale effort smooth jazz weasel alcohol"\nconst walletMnemonic = ethers.Wallet.fromMnemonic(mnemonic)\n\n// ...or from a private key\nconst walletPrivateKey = new ethers.Wallet(walletMnemonic.privateKey)\n\n// ...or create a wallet from a random private key\nconst randomWallet = ethers.Wallet.createRandom()\n\nwalletMnemonic.address\n// \'0x71CB05EE1b1F506fF321Da3dac38f25c0c9ce6E1\'\n\n// The internal cryptographic components\nwalletMnemonic.privateKey\n// \'0x1da6847600b0ee25e9ad9a52abbd786dd2502fa4005dd5af9310b7cc7a3b25db\'\nwalletMnemonic.publicKey\n// \'0x04b9e72dfd423bcf95b3801ac93f4392be5ff22143f9980eb78b3a860c...d64\'\n\nconst tx = {\n  to: "0x8ba1f109551bD432803012645Ac136ddd64DBA72",\n  value: ethers.utils.parseEther("1.0"),\n}\n\n// Sign a transaction\nwalletMnemonic.signTransaction(tx)\n// { Promise: \'0xf865808080948ba1f109551bd432803012645ac136ddd6...dfc\' }\n\n// Connect to the Ethereum network using a provider\nconst wallet = walletMnemonic.connect(provider)\n\n// Query the network\nwallet.getBalance()\n// { Promise: { BigNumber: "42" } }\nwallet.getTransactionCount()\n// { Promise: 0 }\n\n// Send ether\nwallet.sendTransaction(tx)\n\n// Content adapted from ethers documentation by Richard Moore\n// https://docs.ethers.io/v5/api/signer/#Wallet\n// https://github.com/ethers-io/ethers.js/blob/master/docs/v5/api/signer/README.md#methods\n// Content is licensed under the Creative Commons License:\n// https://choosealicense.com/licenses/cc-by-4.0/\n'},69111:function(e,n){n.Z=' // SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\n// This is a smart contract - a program that can be deployed to the Ethereum blockchain.\ncontract SimpleDomainRegistry {\n\n    address public owner;\n    // Hypothetical cost to register a domain name\n    uint constant public DOMAIN_NAME_COST = 1 ether;\n\n    // A `mapping` is essentially a hash table data structure.\n    // This `mapping` assigns an address (the domain holder) to a string (the domain name).\n    mapping (string => address) public domainNames;\n\n\n\t// When \'SimpleDomainRegistry\' contract is deployed,\n\t// set the deploying address as the owner of the contract.\n    constructor() {\n        owner = msg.sender;\n    }\n\n    // Registers a domain name (if not already registered)\n    function register(string memory domainName) public payable {\n        require(msg.value >= DOMAIN_NAME_COST, "Insufficient amount.");\n        require(domainNames[domainName] == address(0), "Domain name already registered.");\n        domainNames[domainName] = msg.sender;\n    }\n\n    // Transfers a domain name to another address\n    function transfer(address receiver, string memory domainName) public {\n        require(domainNames[domainName] == msg.sender, "Only the domain name owner can transfer.");\n        domainNames[domainName] = receiver;\n    }\n\n    // Withdraw funds from contract\n    function withdraw() public {\n        require(msg.sender == owner, "Only the contract owner can withdraw.");\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}\n'},67944:function(e,n){n.Z="// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\n// This is a smart contract - a program that can be deployed to the Ethereum blockchain.\ncontract SimpleToken {\n    // An `address` is comparable to an email address - it's used to identify an account on Ethereum.\n    address public owner;\n    uint256 public constant token_supply = 1000000000000;\n\n    // A `mapping` is essentially a hash table data structure.\n    // This `mapping` assigns an unsigned integer (the token balance) to an address (the token holder).\n    mapping (address => uint) public balances;\n\n\n\t// When 'SimpleToken' contract is deployed:\n\t// 1. set the deploying address as the owner of the contract\n\t// 2. set the token balance of the owner to the total token supply\n    constructor() {\n        owner = msg.sender;\n        balances[owner] = token_supply;\n    }\n\n    // Sends an amount of tokens from any caller to any address.\n    function transfer(address receiver, uint amount) public {\n        // The sender must have enough tokens to send\n        require(amount <= balances[msg.sender], \"Insufficient balance.\");\n\n        // Adjusts token balances of the two addresses\n        balances[msg.sender] -= amount;\n        balances[receiver] += amount;\n    }\n}\n"},85016:function(e,n){n.Z='// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\n// This is a smart contract - a program that can be deployed to the Ethereum blockchain.\ncontract SimpleWallet {\n    // An \'address\' is comparable to an email address - it\'s used to identify an account on Ethereum.\n    address payable private owner;\n\n    // Events allow for logging of activity on the blockchain.\n    // Software applications can listen for events in order to react to contract state changes.\n    event LogDeposit(uint amount, address indexed sender);\n    event LogWithdrawal(uint amount, address indexed recipient);\n\n\t// When this contract is deployed, set the deploying address as the owner of the contract.\n    constructor() {\n        owner = payable(msg.sender);\n    }\n\n    // Send ETH from the function caller to the SimpleWallet contract\n    function deposit() public payable {\n        require(msg.value > 0, "Must send ETH.");\n        emit LogDeposit(msg.value, msg.sender);\n    }\n\n    // Send ETH from the SimpleWallet contract to a chosen recipient\n    function withdraw(uint amount, address payable recipient) public {\n        require(msg.sender == owner, "Only the owner of this wallet can withdraw.");\n        require(address(this).balance >= amount, "Not enough funds.");\n        emit LogWithdrawal(amount, recipient);\n        recipient.transfer(amount);\n    }\n}\n'}}]);
//# sourceMappingURL=component---src-pages-index-tsx-e75a1740bf9f80a1de1b.js.map