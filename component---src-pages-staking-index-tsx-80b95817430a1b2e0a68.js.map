{"version":3,"file":"component---src-pages-staking-index-tsx-80b95817430a1b2e0a68.js","mappings":"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","sources":["webpack://ethereum-org-website/./src/components/PageHero.tsx","webpack://ethereum-org-website/./src/components/Staking/StakingHierarchy.tsx","webpack://ethereum-org-website/./src/components/Staking/StakingHomeTableOfContents.tsx","webpack://ethereum-org-website/./src/components/Staking/StakingStatsBox.tsx","webpack://ethereum-org-website/./src/components/Tooltip.tsx","webpack://ethereum-org-website/./src/utils/cache.ts"],"sourcesContent":["import React, { ReactNode } from \"react\"\nimport { Box, Flex, Heading, Wrap, WrapItem } from \"@chakra-ui/react\"\n\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\"\n\nimport ButtonLink, { IProps as IButtonLinkProps } from \"./ButtonLink\"\nimport Button, { IProps as IButtonProps } from \"./Button\"\n\nexport interface IButtonLink extends IButtonLinkProps {\n  content: ReactNode\n}\n\nexport interface IButton extends IButtonProps {\n  content: ReactNode\n}\n\nexport interface IContent {\n  buttons?: Array<IButtonLink | IButton>\n  title: ReactNode\n  header: ReactNode\n  subtitle: ReactNode\n  image: IGatsbyImageData\n  alt: string\n}\n\nexport interface IProps {\n  content: IContent\n  isReverse?: boolean\n  children?: ReactNode\n  className?: string\n}\n\nfunction isButtonLink(button: IButton | IButtonLink): button is IButtonLink {\n  return (button as IButtonLink).to !== undefined\n}\n\nconst PageHero: React.FC<IProps> = ({\n  content,\n  isReverse = false,\n  children,\n  className,\n}) => {\n  const { buttons, title, header, subtitle, image, alt } = content\n  return (\n    <Box py={4} px={8} width=\"full\">\n      <Flex\n        justifyContent=\"space-between\"\n        mt={8}\n        px={{ base: 0, lg: 16 }}\n        direction={{ base: isReverse ? \"column\" : \"column-reverse\", lg: \"row\" }}\n        className={className}\n      >\n        <Box\n          maxW={{ base: \"full\", lg: \"container.sm\" }}\n          py={{ base: 16, lg: 32 }}\n          pl={{ base: 0, lg: 8 }}\n          mr={4}\n        >\n          <Heading\n            as=\"h1\"\n            textTransform=\"uppercase\"\n            fontSize=\"md\"\n            fontWeight=\"normal\"\n            mb={4}\n            color=\"text300\"\n            lineHeight={1.4}\n          >\n            {title}\n          </Heading>\n          <Heading\n            as=\"h2\"\n            fontWeight=\"bold\"\n            fontSize={{ base: \"2.5rem\", lg: \"5xl\" }}\n            maxW=\"full\"\n            mb={0}\n            color=\"text00\"\n            lineHeight={1.4}\n          >\n            {header}\n          </Heading>\n          <Box\n            fontSize={{ base: \"xl\", lg: \"2xl\" }}\n            lineHeight={1.4}\n            color=\"text200\"\n            mt={4}\n            mb={8}\n          >\n            {subtitle}\n          </Box>\n          {buttons && (\n            <Wrap spacing={2}>\n              {buttons.map((button, idx) => {\n                if (isButtonLink(button)) {\n                  return (\n                    <WrapItem>\n                      <ButtonLink\n                        key={idx}\n                        variant={button.variant}\n                        to={button.to}\n                      >\n                        {button.content}\n                      </ButtonLink>\n                    </WrapItem>\n                  )\n                }\n\n                if (button.toId) {\n                  return (\n                    <WrapItem>\n                      <Button\n                        key={idx}\n                        variant={button.variant}\n                        toId={button.toId}\n                      >\n                        {button.content}\n                      </Button>\n                    </WrapItem>\n                  )\n                }\n              })}\n            </Wrap>\n          )}\n          {children}\n        </Box>\n        <Box\n          as={GatsbyImage}\n          flex=\"1 1 50%\"\n          alignSelf=\"center\"\n          mt={{ base: 0, lg: 12 }}\n          ml={{ base: 0, lg: 12 }}\n          w=\"full\"\n          maxWidth={{ base: \"560px\", lg: \"624px\" }}\n          image={image}\n          imgStyle={{\n            objectFit: \"contain\",\n          }}\n          alt={alt}\n          loading=\"eager\"\n        />\n      </Flex>\n    </Box>\n  )\n}\n\nexport default PageHero\n","// Libraries\nimport React, { ReactNode } from \"react\"\nimport {\n  Box,\n  calc,\n  Center,\n  cssVar,\n  Flex,\n  Heading,\n  Icon,\n  Show,\n  SimpleGrid,\n  useToken,\n  VStack,\n} from \"@chakra-ui/react\"\n\n// Components\nimport ButtonLink from \"../ButtonLink\"\nimport Translation from \"../Translation\"\n\n// SVG icons\nimport {\n  StakingGlyphCentralizedIcon,\n  StakingGlyphCloudIcon,\n  StakingGlyphCPUIcon,\n  StakingGlyphEtherCircleIcon,\n  StakingGlyphTokenWalletIcon,\n} from \"../icons/staking\"\n\n// Utils\nimport { trackCustomEvent } from \"../../utils/matomo\"\n\ntype ChildOnlyType = {\n  children: ReactNode\n}\n\nconst $colorVar = cssVar(\"color\")\nconst $nextColorVar = cssVar(\"next-color\")\nconst $fillColorVar = cssVar(\"fill-color\")\n\nconst SectionGrid: React.FC<{ number: number; children: ReactNode }> = ({\n  number,\n  children,\n}) => {\n  const colorValue = () => {\n    switch (number) {\n      case 1:\n        return \"colors.stakingGold\"\n      case 2:\n        return \"colors.stakingGreen\"\n      case 3:\n        return \"colors.stakingBlue\"\n      case 4:\n        return \"colors.stakingRed\"\n      default:\n        return \"#000000\"\n    }\n  }\n\n  const nextColorValue = () => {\n    switch (number) {\n      case 1:\n        return \"colors.stakingGreen\"\n      case 2:\n        return \"colors.stakingBlue\"\n      case 3:\n        return \"colors.stakingRed\"\n      case 4:\n        return \"#00000000\"\n      default:\n        return \"#000000\"\n    }\n  }\n\n  const fillColorValue = () => {\n    switch (number) {\n      case 1:\n        return \"colors.stakingGoldFill\"\n      case 2:\n        return \"colors.stakingGreenFill\"\n      case 3:\n        return \"colors.stakingBlueFill\"\n      case 4:\n        return \"colors.stakingRedFill\"\n      default:\n        return \"#000000\"\n    }\n  }\n\n  const asideScaleVal = 1.05 + number / 70\n  const asideTranslateVal = number + \"px\"\n\n  return (\n    <SimpleGrid\n      gap={{ base: 4, md: \"0 2rem\" }}\n      templateColumns={{ base: \"1fr\", md: \"5rem 1fr 5rem\" }}\n      templateAreas={{\n        base: `\n          \"ether\"\n          \"header\"\n          \"content\"\n        `,\n        md: `\n          \"ether header glyph\"\n          \"decorator content content\"\n        `,\n      }}\n      position=\"relative\"\n      sx={{\n        [$colorVar.variable]: colorValue(),\n        [$nextColorVar.variable]: nextColorValue(),\n        [$fillColorVar.variable]: fillColorValue(),\n        aside: {\n          _after: {\n            transform: `scale(${asideScaleVal}) translateY(${asideTranslateVal})`,\n          },\n        },\n      }}\n    >\n      {children}\n    </SimpleGrid>\n  )\n}\n\nconst StyledEtherSvg: React.FC<{ size: string }> = ({ size }) => (\n  <Center gridArea=\"ether\" zIndex={2} maxW={20} width=\"full\" mx=\"auto\">\n    <StakingGlyphEtherCircleIcon\n      boxSize={size}\n      color={$colorVar.reference}\n      sx={{\n        \"#transparentBackground\": {\n          fill: $fillColorVar.reference,\n        },\n      }}\n    />\n  </Center>\n)\n\nconst Line = () => {\n  // TODO: Remove after completion of the Chakra migration\n  const medBp = useToken(\"breakpoints\", \"md\")\n\n  return (\n    <Show above={medBp}>\n      <Box\n        as=\"aside\"\n        gridColumn={1}\n        gridRow=\"1 / 3\"\n        boxSize=\"100%\"\n        position=\"relative\"\n        _after={{\n          content: `\"\"`,\n          height: calc.subtract(\"100%\", \"50px\"),\n          borderImage: `linear-gradient(to bottom, ${$colorVar.reference}, ${$nextColorVar.reference}) 1 100%`,\n          borderLeft: \"4px\",\n          borderColor: \"orange\",\n          position: \"absolute\",\n          left: calc.subtract(\"50%\", \"2px\"),\n          top: \"50px\",\n          zIndex: 1,\n        }}\n      />\n    </Show>\n  )\n}\n\nconst Header = ({ children }: ChildOnlyType) => (\n  <Flex\n    gridArea=\"header\"\n    flexDirection=\"column\"\n    justify=\"center\"\n    alignItems={{ base: \"center\", md: \"initial\" }}\n    gap={2}\n  >\n    {children}\n  </Flex>\n)\n\nconst HeadingEl = ({ children }: ChildOnlyType) => (\n  <Heading\n    m={0}\n    color={$colorVar.reference}\n    fontSize=\"2rem\"\n    fontWeight={600}\n    lineHeight={1.4}\n    textAlign={{ base: \"center\", md: \"initial\" }}\n  >\n    {children}\n  </Heading>\n)\n\nconst Pills = ({ children }: ChildOnlyType) => (\n  <Flex\n    flexWrap=\"wrap\"\n    gap={1}\n    justify={{ base: \"center\", md: \"initial\" }}\n    sx={{\n      p: {\n        color: $colorVar.reference,\n        m: 0,\n        position: \"relative\",\n        py: 0.5,\n        px: 1.5,\n        whiteSpace: \"nowrap\",\n        _after: {\n          content: `\"\"`,\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          boxSize: \"100%\",\n          background: $colorVar.reference,\n          opacity: 0.125,\n          borderRadius: \"sm\",\n        },\n      },\n    }}\n  >\n    {children}\n  </Flex>\n)\n\nconst Glyph = ({ glyphIcon }: { glyphIcon: typeof Icon }) => {\n  const Icon = glyphIcon\n  return (\n    <Center gridArea={{ base: \"content\", md: \"glyph\" }}>\n      <Icon\n        boxSize={{ base: \"50%\", md: \"50px\" }}\n        color={$colorVar.reference}\n        opacity={{ base: 0.1, md: \"initial\" }}\n      />\n    </Center>\n  )\n}\n\nconst Content = ({ children }: ChildOnlyType) => (\n  <Box\n    gridArea=\"content\"\n    mt={{ md: 4 }}\n    mb={{ md: 12 }}\n    sx={{\n      // For use in markdown files\n      \".gold\": {\n        color: \"stakingGold\",\n        fontWeight: 600,\n      },\n    }}\n  >\n    {children}\n  </Box>\n)\n\nexport interface IProps {}\n\nconst StakingHierarchy: React.FC<IProps> = () => {\n  const [stakingGold, stakingGreen, stakingBlue, stakingRed] = useToken(\n    \"colors\",\n    [\"stakingGold\", \"stakingGreen\", \"stakingBlue\", \"stakingRed\"]\n  )\n\n  return (\n    <VStack\n      bgGradient=\"linear(rgba(237, 194, 84, 0.1) 13.39%, rgba(75, 231, 156, 0.1) 44.21%, rgba(231, 202, 200, 0.1) 82.88%)\"\n      borderRadius={{ base: 0, md: \"lg\" }}\n      spacing={{ base: 16, md: 0 }}\n      p={8}\n      borderLeft={{ base: \"4px\", md: \"none\" }}\n      borderRight={0}\n      sx={{\n        borderImage: `linear-gradient(to bottom, ${stakingGold} 5%, ${stakingGreen} 30%, ${stakingBlue} 55%, ${stakingRed} 80%) 1 100%`,\n      }}\n    >\n      <SectionGrid number={1}>\n        <StyledEtherSvg size=\"100%\" />\n        <Line />\n        <Header>\n          <HeadingEl>\n            <Translation id=\"page-staking-hierarchy-solo-h2\" />\n          </HeadingEl>\n          <Pills>\n            <p>\n              <em>\n                <Translation id=\"page-staking-hierarchy-solo-pill-1\" />\n              </em>\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-solo-pill-2\" />\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-solo-pill-3\" />\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-solo-pill-4\" />\n            </p>\n          </Pills>\n        </Header>\n        <Glyph glyphIcon={StakingGlyphCPUIcon} />\n        <Content>\n          <p>\n            <Translation id=\"page-staking-hierarchy-solo-p1\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-solo-p2\" />\n          </p>\n          <ButtonLink\n            to=\"/staking/solo/\"\n            onClick={() => {\n              trackCustomEvent({\n                eventCategory: `StakingHierarchy`,\n                eventAction: `Clicked`,\n                eventName: \"clicked solo staking\",\n              })\n            }}\n            width={{ base: \"100%\", md: \"auto\" }}\n          >\n            <Translation id=\"page-staking-more-on-solo\" />\n          </ButtonLink>\n        </Content>\n      </SectionGrid>\n      <SectionGrid number={2}>\n        <StyledEtherSvg size=\"90%\" />\n        <Line />\n        <Header>\n          <HeadingEl>\n            <Translation id=\"page-staking-dropdown-saas\" />\n          </HeadingEl>\n          <Pills>\n            <p>\n              <Translation id=\"page-staking-hierarchy-saas-pill-1\"></Translation>\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-saas-pill-2\"></Translation>\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-saas-pill-3\"></Translation>\n            </p>\n          </Pills>\n        </Header>\n        <Glyph glyphIcon={StakingGlyphCloudIcon} />\n        <Content>\n          <p>\n            <Translation id=\"page-staking-hierarchy-saas-p1\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-saas-p2\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-saas-p3\" />\n          </p>\n          <ButtonLink\n            to=\"/staking/saas/\"\n            onClick={() => {\n              trackCustomEvent({\n                eventCategory: `StakingHierarchy`,\n                eventAction: `Clicked`,\n                eventName: \"clicked staking as a service\",\n              })\n            }}\n            width={{ base: \"100%\", md: \"auto\" }}\n          >\n            <Translation id=\"page-staking-more-on-saas\" />\n          </ButtonLink>\n        </Content>\n      </SectionGrid>\n      <SectionGrid number={3}>\n        <StyledEtherSvg size=\"80%\" />\n        <Line />\n        <Header>\n          <HeadingEl>\n            <Translation id=\"page-staking-dropdown-pools\" />\n          </HeadingEl>\n          <Pills>\n            <p>\n              <Translation id=\"page-staking-hierarchy-pools-pill-1\" />\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-pools-pill-2\" />\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-pools-pill-3\" />\n            </p>\n            <p>\n              <em>\n                <Translation id=\"page-staking-hierarchy-pools-pill-4\" />\n              </em>\n            </p>\n          </Pills>\n        </Header>\n        <Glyph glyphIcon={StakingGlyphTokenWalletIcon} />\n        <Content>\n          <p>\n            <Translation id=\"page-staking-hierarchy-pools-p1\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-pools-p2\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-pools-p3\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-pools-p4\" />\n          </p>\n          <ButtonLink\n            to=\"/staking/pools/\"\n            onClick={() => {\n              trackCustomEvent({\n                eventCategory: `StakingHierarchy`,\n                eventAction: `Clicked`,\n                eventName: \"clicked pooled staking\",\n              })\n            }}\n            width={{ base: \"100%\", md: \"auto\" }}\n          >\n            <Translation id=\"page-staking-more-on-pools\" />\n          </ButtonLink>\n        </Content>\n      </SectionGrid>\n      <SectionGrid number={4}>\n        <StyledEtherSvg size=\"70%\" />\n        <Line />\n        <Header>\n          <HeadingEl>\n            <Translation id=\"page-staking-hierarchy-cex-h2\" />\n          </HeadingEl>\n          <Pills>\n            <p>\n              <em>\n                <Translation id=\"page-staking-hierarchy-cex-pill-1\" />\n              </em>\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-cex-pill-2\" />\n            </p>\n          </Pills>\n        </Header>\n        <Glyph glyphIcon={StakingGlyphCentralizedIcon} />\n        <Content>\n          <p>\n            <Translation id=\"page-staking-hierarchy-cex-p1\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-cex-p2\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-cex-p3\" />\n          </p>\n        </Content>\n      </SectionGrid>\n    </VStack>\n  )\n}\n\nexport default StakingHierarchy\n","import React from \"react\"\nimport { Link as GatsbyLink } from \"gatsby\"\nimport { Box, List, ListItem } from \"@chakra-ui/react\"\nimport Link from \"../Link\"\n\ninterface Item {\n  id: string\n  title: string\n}\n\ninterface ITableOfContentsLinkProps {\n  item: Item\n}\n\nconst TableOfContentsLink: React.FC<ITableOfContentsLinkProps> = ({\n  item: { id, title },\n}) => {\n  const url = `#${id}`\n\n  return (\n    <Link\n      as={GatsbyLink}\n      to={url}\n      position=\"relative\"\n      display=\"inline-block\"\n      color=\"text300\"\n      // `li :last-child` global selector wants to override this without `!important`\n      mb=\"0.5rem !important\"\n    >\n      {title}\n    </Link>\n  )\n}\n\nexport interface IProps {\n  items: Array<Item>\n}\n\nconst StakingHomeTableOfContents: React.FC<IProps> = ({ items }) => {\n  if (!items) return null\n\n  return (\n    <Box as=\"nav\" p={0} textAlign=\"right\" mb={8} overflowY=\"auto\">\n      <List fontSize=\"xl\" lineHeight={1.6} fontWeight={400} ps={4} pe={1} m={0}>\n        {items.map((item, index) => (\n          <ListItem key={index} m={0}>\n            <div>\n              <TableOfContentsLink item={item} />\n            </div>\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  )\n}\n\nexport default StakingHomeTableOfContents\n","// Import libraries\nimport React, { useState, useEffect, ReactNode } from \"react\"\nimport { MdInfoOutline } from \"react-icons/md\"\nimport { useIntl } from \"react-intl\"\nimport { Code, Flex, Icon, Spinner, VStack } from \"@chakra-ui/react\"\n// Import components\nimport Translation from \"../Translation\"\nimport Tooltip from \"../Tooltip\"\nimport Link from \"../Link\"\n// Import utilities\nimport { Lang } from \"../../utils/languages\"\nimport { getData } from \"../../utils/cache\"\nimport { getLocaleForNumberFormat } from \"../../utils/translations\"\n\n// Constants\nconst NA_ERROR = \"n/a\"\nconst ZERO = \"0\"\nconst MAX_EFFECTIVE_BALANCE = 32\n\nconst Cell: React.FC<{ children: ReactNode }> = ({ children }) => {\n  return (\n    <VStack\n      spacing={2}\n      py={4}\n      px={8}\n      borderLeft={{ md: \"1px\" }}\n      borderTop={{ base: \"1px\", md: \"none\" }}\n      // `!important` needed to force an override of the user-agent\n      borderColor=\"preBorder !important\"\n      _first={{\n        borderLeft: \"none\",\n        borderTop: \"none\",\n      }}\n    >\n      {children}\n    </VStack>\n  )\n}\n\nconst Value: React.FC<{ children: ReactNode; title: string }> = ({\n  children,\n  title,\n}) => {\n  return (\n    <Code\n      title={title}\n      fontWeight=\"bold\"\n      fontSize=\"2rem\"\n      background=\"none\"\n      color=\"primary\"\n      p={0}\n    >\n      {children}\n    </Code>\n  )\n}\n\nconst Label: React.FC<{ children: ReactNode }> = ({ children }) => {\n  return (\n    <Flex alignItems=\"center\" textTransform=\"uppercase\" fontSize=\"sm\">\n      {children}\n    </Flex>\n  )\n}\n\n// BeaconchainTooltip component\nconst BeaconchainTooltip = ({ isEthStore }: { isEthStore?: boolean }) => (\n  <Tooltip\n    content={\n      <div>\n        <Translation id=\"data-provided-by\" />{\" \"}\n        {isEthStore && (\n          <Link to=\"https://github.com/gobitfly/eth.store/\">ETH.STORE, </Link>\n        )}\n        <Link to=\"https://beaconcha.in\">Beaconcha.in</Link>\n      </div>\n    }\n  >\n    <Icon\n      as={MdInfoOutline}\n      color=\"text\"\n      marginInlineStart={2}\n      _hover={{ color: \"primary\" }}\n      _active={{ color: \"primary\" }}\n      _focus={{ color: \"primary\" }}\n      boxSize={4}\n    />\n  </Tooltip>\n)\n\n// Interfaces\nexport interface IProps {}\n\n// StatsBox component\nconst StakingStatsBox: React.FC<IProps> = () => {\n  const intl = useIntl()\n  /**\n   * State variables:\n   * - ZERO is default string, \"0\", representing loading state\n   * - null is error state\n   */\n  const [totalEth, setTotalEth] = useState<string | null>(ZERO)\n  const [totalValidators, setTotalValidators] = useState<string | null>(ZERO)\n  const [currentApr, setCurrentApr] = useState<string | null>(ZERO)\n\n  useEffect(() => {\n    const localeForStatsBoxNumbers = getLocaleForNumberFormat(\n      intl.locale as Lang\n    )\n\n    // Helper functions\n    const formatInteger = (amount: number): string =>\n      new Intl.NumberFormat(localeForStatsBoxNumbers).format(amount)\n\n    const formatPercentage = (amount: number): string =>\n      new Intl.NumberFormat(localeForStatsBoxNumbers, {\n        style: \"percent\",\n        minimumSignificantDigits: 2,\n        maximumSignificantDigits: 2,\n      }).format(amount)\n\n    // API call, data formatting, and state setting\n    ;(async () => {\n      try {\n        const {\n          data: { apr, effective_balances_sum_wei },\n        } = await getData<{\n          data: { apr: number; effective_balances_sum_wei: number }\n        }>(\"https://beaconcha.in/api/v1/ethstore/latest\")\n        const totalEffectiveBalance: number = effective_balances_sum_wei * 1e-18\n        const valueTotalEth = formatInteger(Math.floor(totalEffectiveBalance))\n        const valueTotalValidators = formatInteger(\n          totalEffectiveBalance / MAX_EFFECTIVE_BALANCE\n        )\n        const valueCurrentApr = formatPercentage(apr)\n        setTotalEth(valueTotalEth)\n        setTotalValidators(valueTotalValidators)\n        setCurrentApr(valueCurrentApr)\n      } catch (error) {\n        setTotalEth(null)\n        setCurrentApr(null)\n        setTotalValidators(null)\n      }\n    })()\n  }, [intl.locale])\n\n  return (\n    <Flex direction={{ base: \"column\", md: \"row\" }}>\n      <Cell>\n        {totalEth === ZERO ? (\n          <Spinner />\n        ) : (\n          <Value title={totalEth ? \"\" : NA_ERROR}>{totalEth || NA_ERROR}</Value>\n        )}\n        <Label>\n          <Translation id=\"page-staking-stats-box-metric-1\" />\n          <BeaconchainTooltip />\n        </Label>\n      </Cell>\n      <Cell>\n        {totalValidators === ZERO ? (\n          <Spinner />\n        ) : (\n          <Value title={totalValidators ? \"\" : NA_ERROR}>\n            {totalValidators || NA_ERROR}\n          </Value>\n        )}\n        <Label>\n          <Translation id=\"page-staking-stats-box-metric-2\" />\n          <BeaconchainTooltip />\n        </Label>\n      </Cell>\n      <Cell>\n        {currentApr === ZERO ? (\n          <Spinner />\n        ) : (\n          <Value title={currentApr ? \"\" : NA_ERROR}>\n            {currentApr || NA_ERROR}\n          </Value>\n        )}\n        <Label>\n          <Translation id=\"page-staking-stats-box-metric-3\" />\n          <BeaconchainTooltip isEthStore />\n        </Label>\n      </Cell>\n    </Flex>\n  )\n}\n\nexport default StakingStatsBox\n","import React, { ReactNode, useState } from \"react\"\nimport { Box, useColorModeValue } from \"@chakra-ui/react\"\nimport * as utils from \"../utils/isMobile\"\n\nexport interface IProps {\n  content: ReactNode\n  children?: React.ReactNode\n}\n\n// TODO add `position` prop\nconst Tooltip: React.FC<IProps> = ({ content, children }) => {\n  const [isVisible, setIsVisible] = useState<boolean>(false)\n  const isMobile = utils.isMobile()\n  const shadow = useColorModeValue(\"tableBox.light\", \"tableBox.dark\")\n\n  return (\n    <>\n      {isVisible && isMobile && (\n        // Invisible full screen div \"below\" the clickable link\n        // Added so clicking away anywhere will hide Tooltip\n        <Box\n          position=\"fixed\"\n          top={0}\n          left={0}\n          w=\"full\"\n          h=\"full\"\n          zIndex={1}\n          onClick={() => setIsVisible(false)}\n        />\n      )}\n      <Box\n        position=\"relative\"\n        display=\"inline-flex\"\n        userSelect=\"none\"\n        cursor=\"pointer\"\n        title=\"More info\"\n        onMouseEnter={!isMobile ? () => setIsVisible(true) : undefined}\n        onMouseLeave={!isMobile ? () => setIsVisible(false) : undefined}\n        onClick={isMobile ? () => setIsVisible(!isVisible) : undefined}\n      >\n        {children}\n        {isVisible && (\n          <Box\n            textAlign=\"center\"\n            whiteSpace=\"normal\"\n            w={{ base: \"140px\", md: \"200px\" }}\n            color=\"text\"\n            bg=\"background\"\n            boxShadow={shadow}\n            position=\"absolute\"\n            zIndex=\"docked\"\n            py={4}\n            px={2}\n            textTransform=\"none\"\n            fontSize=\"sm\"\n            fontWeight=\"medium\"\n            cursor=\"default\"\n            borderRadius=\"base\"\n            bottom=\"125%\"\n            left=\"25%\"\n            transform=\"translateX(-50%)\"\n          >\n            <Box\n              as=\"span\"\n              position=\"absolute\"\n              bottom={-2}\n              left=\"calc(50% - 6px)\"\n              borderRightWidth={10}\n              borderRightStyle=\"solid\"\n              borderRightColor=\"transparent\"\n              borderTopWidth={10}\n              borderTopStyle=\"solid\"\n              borderTopColor=\"background\"\n              borderLeftWidth={10}\n              borderLeftStyle=\"solid\"\n              borderLeftColor=\"transparent\"\n            />\n            {content}\n          </Box>\n        )}\n      </Box>\n    </>\n  )\n}\n\nexport default Tooltip\n","import axios from \"axios\"\n\nconst ONE_HOUR = 1000 * 60 * 60\n\nexport interface CacheStorage<T> {\n  value: T\n  timestamp: number\n}\n\nconst emptyCacheItemStorage: CacheStorage<string> = {\n  value: \"\",\n  timestamp: 0,\n}\n\nconst stringifyEmptyCacheItemStorage = JSON.stringify(emptyCacheItemStorage)\n\n/**\n * Write inside the local storage the value returned by the API call for a given key\n * @param {string} key stored in the local storage\n * @param {T} value for a given key to write in the local storage\n */\nexport const writeToCache = <T>(key: string, value: T): void => {\n  const cacheStorageItem: CacheStorage<T> = {\n    value,\n    timestamp: new Date().getTime(),\n  }\n  localStorage.setItem(key, JSON.stringify(cacheStorageItem))\n}\n\n/**\n * Retrieve the value stored in the local storage for a given key\n * If the value is not defined or the key does not exist, return a default CacheStorage\n * with an empty value and timestamp set to 0\n * @see CacheStorage\n * @param {string} key stored in the local storage\n * @returns {CacheStorage<T>} element stored in browser local storage\n */\nconst readFromCache = <T>(key: string): CacheStorage<T> => {\n  return JSON.parse(\n    localStorage.getItem(key) || stringifyEmptyCacheItemStorage\n  ) as CacheStorage<T>\n}\n\n/**\n * API call to get the response data and store in the local storage if needed\n * @param {string} url API url\n * @param {boolean} cacheResponse should we store the value to the local storage\n * @returns {T} data response from the API\n */\nexport const getFreshData = async <T>(\n  url: string,\n  cacheResponse: boolean = false\n): Promise<T> => {\n  const { data } = await axios.get(url)\n  cacheResponse && writeToCache(url, data)\n  return data\n}\n\nconst getCachedData = <T>(url: string): CacheStorage<T> => readFromCache(url)\n\n/**\n * Get the data response from the local storage or the API\n * @param {string} url of the API\n * @returns {T} data from the API or the local storage\n */\nexport const getData = async <T>(url: string): Promise<T> => {\n  const cachedData: CacheStorage<T> = getCachedData(url)\n  const now = new Date().getTime()\n  if (\n    cachedData &&\n    cachedData.timestamp > 0 &&\n    now - cachedData.timestamp < ONE_HOUR\n  ) {\n    return cachedData.value\n  } else {\n    return getFreshData(url, true)\n  }\n}\n"],"names":["_ref","content","isReverse","children","className","buttons","title","header","subtitle","image","alt","___EmotionJSX","Box","py","px","width","Flex","justifyContent","mt","base","lg","direction","maxW","pl","mr","Heading","as","textTransform","fontSize","fontWeight","mb","color","lineHeight","Wrap","spacing","map","button","idx","undefined","to","isButtonLink","WrapItem","ButtonLink","key","variant","toId","Button","GatsbyImage","flex","alignSelf","ml","w","maxWidth","imgStyle","objectFit","loading","$colorVar","cssVar","$nextColorVar","$fillColorVar","SectionGrid","number","asideScaleVal","asideTranslateVal","SimpleGrid","gap","md","templateColumns","templateAreas","position","sx","variable","colorValue","nextColorValue","fillColorValue","aside","_after","transform","StyledEtherSvg","_ref2","size","Center","gridArea","zIndex","mx","StakingGlyphEtherCircleIcon","boxSize","reference","fill","Line","medBp","useToken","Show","above","gridColumn","gridRow","height","calc","borderImage","borderLeft","borderColor","left","top","Header","_ref3","flexDirection","justify","alignItems","HeadingEl","_ref4","m","textAlign","Pills","_ref5","flexWrap","p","whiteSpace","background","opacity","borderRadius","Glyph","_ref6","glyphIcon","Icon","Content","_ref7","stakingGold","stakingGreen","stakingBlue","stakingRed","VStack","bgGradient","borderRight","Translation","id","StakingGlyphCPUIcon","onClick","trackCustomEvent","eventCategory","eventAction","eventName","StakingGlyphCloudIcon","StakingGlyphTokenWalletIcon","StakingGlyphCentralizedIcon","TableOfContentsLink","item","url","Link","GatsbyLink","display","items","overflowY","List","ps","pe","index","ListItem","NA_ERROR","ZERO","Cell","borderTop","_first","Value","Code","Label","BeaconchainTooltip","isEthStore","Tooltip","MdInfoOutline","marginInlineStart","_hover","_active","_focus","intl","useIntl","totalEth","setTotalEth","useState","totalValidators","setTotalValidators","currentApr","setCurrentApr","useEffect","localeForStatsBoxNumbers","getLocaleForNumberFormat","locale","formatInteger","amount","Intl","NumberFormat","format","data","apr","effective_balances_sum_wei","getData","totalEffectiveBalance","valueTotalEth","Math","floor","valueTotalValidators","valueCurrentApr","style","minimumSignificantDigits","maximumSignificantDigits","error","Spinner","isVisible","setIsVisible","isMobile","utils","shadow","useColorModeValue","h","userSelect","cursor","onMouseEnter","onMouseLeave","bg","boxShadow","bottom","borderRightWidth","borderRightStyle","borderRightColor","borderTopWidth","borderTopStyle","borderTopColor","borderLeftWidth","borderLeftStyle","borderLeftColor","stringifyEmptyCacheItemStorage","JSON","stringify","value","timestamp","getFreshData","async","cacheResponse","axios","cacheStorageItem","Date","getTime","localStorage","setItem","writeToCache","getCachedData","readFromCache","parse","getItem","cachedData","now"],"sourceRoot":""}