{"version":3,"file":"f178b5df86872733a3ce44c189a1aa0d0e7b6bad-06f8b7ada152735a3d76.js","mappings":"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","sources":["webpack://ethereum-org-website/./node_modules/@chakra-ui/media-query/dist/index.esm.js","webpack://ethereum-org-website/./src/components/Staking/StakingCommunityCallout.tsx"],"sourcesContent":["// ../../react-shim.js\nimport React from \"react\";\n\n// src/media-query.tsx\nimport { useTheme } from \"@chakra-ui/system\";\nvar getBreakpoint = (theme, value) => {\n  var _a;\n  return ((_a = theme == null ? void 0 : theme.breakpoints) == null ? void 0 : _a[value]) ?? value;\n};\nfunction useQuery(props) {\n  const { breakpoint = \"\", below, above } = props;\n  const theme = useTheme();\n  const bpBelow = getBreakpoint(theme, below);\n  const bpAbove = getBreakpoint(theme, above);\n  let query = breakpoint;\n  if (bpBelow) {\n    query = `(max-width: ${bpBelow})`;\n  } else if (bpAbove) {\n    query = `(min-width: ${bpAbove})`;\n  }\n  return query;\n}\n\n// src/use-media-query.ts\nimport { useEnvironment } from \"@chakra-ui/react-env\";\nimport { useEffect, useState } from \"react\";\nfunction useMediaQuery(query, options = {}) {\n  const { ssr = true, fallback } = options;\n  const env = useEnvironment();\n  const queries = Array.isArray(query) ? query : [query];\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];\n  fallbackValues = fallbackValues.filter((v) => v != null);\n  const [value, setValue] = useState(() => {\n    return queries.map((query2, index) => ({\n      media: query2,\n      matches: ssr ? !!fallbackValues[index] : env.window.matchMedia(query2).matches\n    }));\n  });\n  useEffect(() => {\n    setValue(queries.map((query2) => ({\n      media: query2,\n      matches: env.window.matchMedia(query2).matches\n    })));\n    const mql = queries.map((query2) => env.window.matchMedia(query2));\n    const handler = (evt) => {\n      setValue((prev) => {\n        return prev.slice().map((item) => {\n          if (item.media === evt.media)\n            return { ...item, matches: evt.matches };\n          return item;\n        });\n      });\n    };\n    mql.forEach((mql2) => {\n      if (typeof mql2.addListener === \"function\") {\n        mql2.addListener(handler);\n      } else {\n        mql2.addEventListener(\"change\", handler);\n      }\n    });\n    return () => {\n      mql.forEach((mql2) => {\n        if (typeof mql2.removeListener === \"function\") {\n          mql2.removeListener(handler);\n        } else {\n          mql2.removeEventListener(\"change\", handler);\n        }\n      });\n    };\n  }, [env.window]);\n  return value.map((item) => item.matches);\n}\n\n// src/media-query.hook.ts\nfunction usePrefersReducedMotion(options) {\n  const [prefersReducedMotion] = useMediaQuery(\"(prefers-reduced-motion: reduce)\", options);\n  return prefersReducedMotion;\n}\nfunction useColorModePreference(options) {\n  const [isLight, isDark] = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"], options);\n  if (isLight)\n    return \"light\";\n  if (isDark)\n    return \"dark\";\n  return void 0;\n}\n\n// src/use-breakpoint.ts\nimport { useTheme as useTheme2 } from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/dist/index.esm.js\nfunction isObject(value) {\n  const type = typeof value;\n  return value != null && (type === \"object\" || type === \"function\") && !Array.isArray(value);\n}\n\n// src/use-breakpoint.ts\nfunction useBreakpoint(arg) {\n  var _a;\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" };\n  const theme = useTheme2();\n  const breakpoints = theme.__breakpoints.details.map(({ minMaxQuery, breakpoint }) => ({\n    breakpoint,\n    query: minMaxQuery.replace(\"@media screen and \", \"\")\n  }));\n  const fallback = breakpoints.map((bp) => bp.breakpoint === opts.fallback);\n  const values = useMediaQuery(breakpoints.map((bp) => bp.query), { fallback, ssr: opts.ssr });\n  const index = values.findIndex((value) => value == true);\n  return ((_a = breakpoints[index]) == null ? void 0 : _a.breakpoint) ?? opts.fallback;\n}\n\n// src/use-breakpoint-value.ts\nimport { useTheme as useTheme3 } from \"@chakra-ui/system\";\nimport { arrayToObjectNotation } from \"@chakra-ui/breakpoint-utils\";\n\n// src/media-query.utils.ts\nimport { breakpoints as defaultBreakPoints } from \"@chakra-ui/breakpoint-utils\";\nfunction getClosestValue(values, breakpoint, breakpoints = defaultBreakPoints) {\n  let index = Object.keys(values).indexOf(breakpoint);\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n  let stopIndex = breakpoints.indexOf(breakpoint);\n  while (stopIndex >= 0) {\n    const key = breakpoints[stopIndex];\n    if (values.hasOwnProperty(key)) {\n      index = stopIndex;\n      break;\n    }\n    stopIndex -= 1;\n  }\n  if (index !== -1) {\n    const key = breakpoints[index];\n    return values[key];\n  }\n  return void 0;\n}\n\n// src/use-breakpoint-value.ts\nfunction useBreakpointValue(values, arg) {\n  var _a;\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" };\n  const breakpoint = useBreakpoint(opts);\n  const theme = useTheme3();\n  if (!breakpoint)\n    return;\n  const breakpoints = Array.from(((_a = theme.__breakpoints) == null ? void 0 : _a.keys) || []);\n  const obj = Array.isArray(values) ? Object.fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(([key, value]) => [key, value])) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\n// src/visibility.tsx\nfunction Visibility(props) {\n  const { breakpoint, hide, children, ssr } = props;\n  const [show] = useMediaQuery(breakpoint, { ssr });\n  const isVisible = hide ? !show : show;\n  const rendered = isVisible ? children : null;\n  return rendered;\n}\n\n// src/show.tsx\nfunction Show(props) {\n  const { children, ssr } = props;\n  const query = useQuery(props);\n  return /* @__PURE__ */ React.createElement(Visibility, {\n    breakpoint: query,\n    ssr\n  }, children);\n}\nShow.displayName = \"Show\";\n\n// src/hide.tsx\nfunction Hide(props) {\n  const { children, ssr } = props;\n  const query = useQuery(props);\n  return /* @__PURE__ */ React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true,\n    ssr\n  }, children);\n}\nHide.displayName = \"Hide\";\nexport {\n  Hide,\n  Show,\n  useBreakpoint,\n  useBreakpointValue,\n  useColorModePreference,\n  useMediaQuery,\n  usePrefersReducedMotion,\n  useQuery\n};\n","import React from \"react\"\nimport { useIntl } from \"react-intl\"\nimport styled from \"@emotion/styled\"\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nimport ButtonLink from \"../ButtonLink\"\nimport CalloutBanner from \"../CalloutBanner\"\nimport Translation from \"../Translation\"\n\nimport { translateMessageId } from \"../../utils/translations\"\nimport { trackCustomEvent } from \"../../utils/matomo\"\nimport { getImage } from \"../../utils/image\"\n\nconst StyledCallout = styled(CalloutBanner)`\n  margin: 4rem 0;\n`\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  gap: 1rem;\n  @media (max-width: ${({ theme }) => theme.breakpoints.m}) {\n    flex-direction: column;\n  }\n`\n\nconst StyledButtonLink = styled(ButtonLink)`\n  @media (max-width: ${({ theme }) => theme.breakpoints.s}) {\n    width: 100%;\n  }\n`\n\nexport interface IProps {\n  id?: string\n}\n\nconst StakingCommunityCallout: React.FC<IProps> = (props) => {\n  const intl = useIntl()\n  const { image } = useStaticQuery(graphql`\n    {\n      image: file(relativePath: { eq: \"enterprise-eth.png\" }) {\n        childImageSharp {\n          gatsbyImageData(\n            width: 500\n            layout: CONSTRAINED\n            placeholder: BLURRED\n            quality: 100\n          )\n        }\n      }\n    }\n  `)\n\n  return (\n    <StyledCallout\n      {...props}\n      image={getImage(image)!}\n      alt={translateMessageId(\"page-staking-image-alt\", intl)}\n      titleKey={\"page-staking-join-community\"}\n      descriptionKey={\"page-staking-join-community-desc\"}\n    >\n      <ButtonContainer>\n        <StyledButtonLink\n          onClick={() => {\n            trackCustomEvent({\n              eventCategory: `StakingCommunityCallout`,\n              eventAction: `Clicked`,\n              eventName: \"clicked discord\",\n            })\n          }}\n          to=\"https://discord.io/ethstaker\"\n        >\n          Discord\n        </StyledButtonLink>\n        <StyledButtonLink\n          onClick={() => {\n            trackCustomEvent({\n              eventCategory: `StakingCommunityCallout`,\n              eventAction: `Clicked`,\n              eventName: \"clicked reddit\",\n            })\n          }}\n          to=\"https://reddit.com/r/ethstaker\"\n        >\n          Reddit\n        </StyledButtonLink>\n        <StyledButtonLink\n          onClick={() => {\n            trackCustomEvent({\n              eventCategory: `StakingCommunityCallout`,\n              eventAction: `Clicked`,\n              eventName: \"clicked website\",\n            })\n          }}\n          to=\"https://ethstaker.cc\"\n        >\n          <Translation id=\"rollup-component-website\" />\n        </StyledButtonLink>\n      </ButtonContainer>\n    </StyledCallout>\n  )\n}\n\nexport default StakingCommunityCallout\n"],"names":["getBreakpoint","theme","value","_a","breakpoints","useQuery","props","breakpoint","below","above","bpBelow","bpAbove","query","useMediaQuery","options","ssr","fallback","env","queries","Array","isArray","fallbackValues","filter","v","setValue","useState","map","query2","index","media","matches","window","matchMedia","useEffect","mql","handler","evt","prev","slice","item","forEach","mql2","addListener","addEventListener","removeListener","removeEventListener","Visibility","hide","children","show","Show","Hide","displayName","StyledCallout","CalloutBanner","ButtonContainer","_ref","m","StyledButtonLink","ButtonLink","_ref2","s","intl","useIntl","image","useStaticQuery","___EmotionJSX","getImage","alt","translateMessageId","titleKey","descriptionKey","onClick","trackCustomEvent","eventCategory","eventAction","eventName","to","Translation","id"],"sourceRoot":""}