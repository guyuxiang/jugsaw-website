{"version":3,"file":"a4b8ec9c410b29f2a3f3cfa576b7dfe059c9b13d-46f726b3257bfa1eebdf.js","mappings":"wQAiBA,MAAMA,GAAS,8GAISC,GAAUA,EAAMC,MAAMC,YAAYC,GAAC,gDAMrDC,GAAe,OAAOC,EAAAA,EAAAA,GAAS,oBAAhB,CAAiB,0KAWrBL,GAAUA,EAAMC,MAAMK,OAAOC,oBAAkB,sBACzCP,GAAUA,EAAMC,MAAMK,OAAOE,MAAI,iEAGhCR,GAAUA,EAAMC,MAAMC,YAAYC,GAAC,qDAOrDM,EAAe,CACnBC,KAAM,CACJC,QAAS,EACTC,QAAS,EACTC,QAAS,QACTC,WAAY,CACVC,SAAU,KAGdC,OAAQ,CACNL,QAAS,EACTC,SAAU,GACVK,cAAe,CACbJ,QAAS,UAKTK,GAAY,oDAENlB,GAAUA,EAAMC,MAAMK,OAAOE,MAAI,mBAE/BR,GAAUA,EAAMC,MAAMK,OAAOa,SAAO,gBAC/BnB,GAAUA,EAAMC,MAAMK,OAAOc,yBAAuB,MAIjEC,GAAU,OAAOC,EAAAA,EAAI,oBAAX,CAAY,4DAIhBtB,GAAUA,EAAMC,MAAMK,OAAOE,MAAI,wCAG/BR,GAAUA,EAAMC,MAAMK,OAAOa,SAAO,MAI5CI,GAAY,8FAINvB,GAAUA,EAAMC,MAAMK,OAAOE,MAAI,kCAG/BR,GAAUA,EAAMC,MAAMK,OAAOa,SAAO,MA2FlD,IAjEyCK,IAA0B,IAAzB,KAAEC,EAAI,UAAEC,GAAW,EAC3D,MAAM,EAACC,EAAO,EAACC,IAAaC,EAAAA,EAAAA,WAAkB,GACxCC,GAAOC,EAAAA,EAAAA,KACPC,GAAMC,EAAAA,EAAAA,cAEZC,EAAAA,EAAAA,GAAkBF,GAAK,IAAMJ,GAAU,KASvC,OACEO,EAAAA,EAAAA,IAACpC,EAAS,CACR2B,UAAWA,EACXM,IAAKA,EACL,wBAAsBI,EAAAA,EAAAA,IAAmBX,EAAKjB,KAAMsB,KAEpDK,EAAAA,EAAAA,IAACE,EAAAA,EAAM,CACLC,QAAQ,UACRC,KAAM,CAAEC,KAAM,OAAQC,GAAI,OAC1BC,UAAUP,EAAAA,EAAAA,IAACQ,EAAAA,IAAM,MACjBC,QAAS,IAAMhB,GAAWD,GAC1BkB,UAjBoBC,IACV,OAAVA,EAAEC,KACJnB,GAAWD,EACb,EAeIqB,SAAU,IAEVb,EAAAA,EAAAA,IAACc,EAAAA,EAAW,CAACC,GAAIzB,EAAKjB,SAExB2B,EAAAA,EAAAA,IAAC/B,EAAY,CACX+C,QAASxB,EAAS,OAAS,SAC3ByB,SAAU3C,EACV4C,QAAQ,UAEP5B,EAAK6B,MAAMC,KAAI,CAAC,EAAgCC,KAAG,IAAnC,KAAEhD,EAAI,GAAEiD,EAAE,OAAEC,EAAM,SAAEC,GAAU,SAC7CxB,EAAAA,EAAAA,IAACjB,EAAY,CAAC6B,IAAKS,EAAKZ,QAAS,IAAMhB,GAAU,MAC5C6B,KAAQC,IACTvB,EAAAA,EAAAA,IAACd,EAAO,CACNuC,mBAAmB,EACnBhB,QAAS,MACPiB,EAAAA,EAAAA,GAAiBH,EAAO,EAE1BD,GAAIA,IAEJtB,EAAAA,EAAAA,IAACc,EAAAA,EAAW,CAACC,GAAI1C,OAGlBiD,IAAOC,IACRvB,EAAAA,EAAAA,IAACd,EAAO,CAACuC,mBAAmB,EAAOH,GAAIA,IACrCtB,EAAAA,EAAAA,IAACc,EAAAA,EAAW,CAACC,GAAI1C,OAGlBmD,IACDxB,EAAAA,EAAAA,IAACZ,EAAY,CAACqB,QAAS,IAAMe,EAASH,KACpCrB,EAAAA,EAAAA,IAACc,EAAAA,EAAW,CAACC,GAAI1C,KAGR,KAGT,C","sources":["webpack://ethereum-org-website/./src/components/ButtonDropdown.tsx"],"sourcesContent":["// Libraries\nimport React, { useState, createRef } from \"react\"\nimport styled from \"@emotion/styled\"\nimport { useIntl } from \"react-intl\"\nimport { motion } from \"framer-motion\"\nimport { MdMenu } from \"react-icons/md\"\n\n// Components\nimport Link from \"./Link\"\nimport Button from \"./Button\"\nimport Translation from \"./Translation\"\n\n// Utils\nimport { useOnClickOutside } from \"../hooks/useOnClickOutside\"\nimport { translateMessageId, TranslationKey } from \"../utils/translations\"\nimport { trackCustomEvent } from \"../utils/matomo\"\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  @media (max-width: ${(props) => props.theme.breakpoints.l}) {\n    width: 100%;\n    flex-direction: column-reverse;\n  }\n`\n\nconst DropdownList = styled(motion.ul)`\n  min-width: 240px;\n  z-index: 2;\n  margin: 0;\n  margin-top: 0.25rem;\n  position: absolute;\n  list-style-type: none;\n  list-style-image: none;\n  top: 100%;\n  width: auto;\n  border-radius: 0.5em;\n  background: ${(props) => props.theme.colors.dropdownBackground};\n  border: 1px solid ${(props) => props.theme.colors.text};\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  @media (max-width: ${(props) => props.theme.breakpoints.l}) {\n    width: 100%;\n    text-align: center;\n    position: initial;\n  }\n`\n\nconst listVariants = {\n  open: {\n    opacity: 1,\n    rotateX: 0,\n    display: \"block\",\n    transition: {\n      duration: 0.2,\n    },\n  },\n  closed: {\n    opacity: 0,\n    rotateX: -15,\n    transitionEnd: {\n      display: \"none\",\n    },\n  },\n}\n\nconst DropdownItem = styled.li`\n  margin: 0;\n  color: ${(props) => props.theme.colors.text};\n  &:hover {\n    color: ${(props) => props.theme.colors.primary};\n    background: ${(props) => props.theme.colors.dropdownBackgroundHover};\n  }\n`\n\nconst NavLink = styled(Link)`\n  text-decoration: none;\n  display: block;\n  padding: 0.5rem;\n  color: ${(props) => props.theme.colors.text};\n  &:hover {\n    text-decoration: none;\n    color: ${(props) => props.theme.colors.primary};\n  }\n`\n\nconst NakedNavLink = styled.div`\n  text-decoration: none;\n  display: block;\n  padding: 0.5rem;\n  color: ${(props) => props.theme.colors.text};\n  cursor: pointer;\n  &:hover {\n    color: ${(props) => props.theme.colors.primary};\n  }\n`\n\nexport interface ListItem {\n  text: TranslationKey\n  to?: string\n  matomo?: {\n    eventCategory: string\n    eventAction: string\n    eventName: string\n  }\n  callback?: (idx: number) => void\n}\n\nexport interface List {\n  text: TranslationKey\n  ariaLabel: string\n  items: Array<ListItem>\n}\n\nexport interface IProps {\n  list: List\n  className?: string\n}\n\nconst ButtonDropdown: React.FC<IProps> = ({ list, className }) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false)\n  const intl = useIntl()\n  const ref = createRef<HTMLInputElement>()\n\n  useOnClickOutside(ref, () => setIsOpen(false))\n\n  // Toggle on `enter` key\n  const onKeyDownHandler = (e: React.KeyboardEvent<HTMLElement>): void => {\n    if (e.key === \"13\") {\n      setIsOpen(!isOpen)\n    }\n  }\n\n  return (\n    <Container\n      className={className}\n      ref={ref}\n      aria-label={`Select ${translateMessageId(list.text, intl)}`}\n    >\n      <Button\n        variant=\"outline\"\n        minW={{ base: \"100%\", lg: \"240\" }}\n        leftIcon={<MdMenu />}\n        onClick={() => setIsOpen(!isOpen)}\n        onKeyDown={onKeyDownHandler}\n        tabIndex={0}\n      >\n        <Translation id={list.text} />\n      </Button>\n      <DropdownList\n        animate={isOpen ? \"open\" : \"closed\"}\n        variants={listVariants}\n        initial=\"closed\"\n      >\n        {list.items.map(({ text, to, matomo, callback }, idx) => (\n          <DropdownItem key={idx} onClick={() => setIsOpen(false)}>\n            {!!to && !!matomo && (\n              <NavLink\n                isPartiallyActive={false}\n                onClick={() => {\n                  trackCustomEvent(matomo)\n                }}\n                to={to}\n              >\n                <Translation id={text} />\n              </NavLink>\n            )}\n            {!!to && !matomo && (\n              <NavLink isPartiallyActive={false} to={to}>\n                <Translation id={text} />\n              </NavLink>\n            )}\n            {!!callback && (\n              <NakedNavLink onClick={() => callback(idx)}>\n                <Translation id={text} />\n              </NakedNavLink>\n            )}\n          </DropdownItem>\n        ))}\n      </DropdownList>\n    </Container>\n  )\n}\n\nexport default ButtonDropdown\n"],"names":["Container","props","theme","breakpoints","l","DropdownList","motion","colors","dropdownBackground","text","listVariants","open","opacity","rotateX","display","transition","duration","closed","transitionEnd","DropdownItem","primary","dropdownBackgroundHover","NavLink","Link","NakedNavLink","_ref","list","className","isOpen","setIsOpen","useState","intl","useIntl","ref","createRef","useOnClickOutside","___EmotionJSX","translateMessageId","Button","variant","minW","base","lg","leftIcon","MdMenu","onClick","onKeyDown","e","key","tabIndex","Translation","id","animate","variants","initial","items","map","idx","to","matomo","callback","isPartiallyActive","trackCustomEvent"],"sourceRoot":""}