{"version":3,"file":"component---src-pages-index-tsx-e75a1740bf9f80a1de1b.js","mappings":"6JAwCA,IAxBoCA,IAK7B,IAL8B,SACnCC,EAAQ,OACRC,EAAM,UACNC,EAAS,MACTC,GACD,EACC,OACEC,EAAAA,EAAAA,IAACC,EAAAA,GAAK,CACJJ,OAAQA,EACRK,eAAe,SACfC,QAAQ,OACRC,QAAS,IAAMN,GAAU,KAEzBE,EAAAA,EAAAA,IAACK,EAAAA,GAAY,OACbL,EAAAA,EAAAA,IAACM,EAAAA,GAAY,MACXN,EAAAA,EAAAA,IAACO,EAAAA,GAAW,KAAER,IACdC,EAAAA,EAAAA,IAACQ,EAAAA,GAAgB,OAEjBR,EAAAA,EAAAA,IAACS,EAAAA,GAAS,KAAEb,IAER,C,4EC5BD,wDACYc,GAAUA,EAAMC,MAAMC,OAAOC,YAAU,gBAC7CH,GAAUA,EAAMC,MAAMC,OAAOE,gBAAc,sDAM3C,kDACAJ,GAAUA,EAAMC,MAAMC,OAAOG,eAAa,0CAE7BL,GAAUA,EAAMC,MAAMC,OAAOI,MAAI,+GAcrD,4HAKEN,GAAUA,EAAMC,MAAMC,OAAOI,MAAI,oCAClBN,GAAUA,EAAMC,MAAMC,OAAOK,oBAAkB,wFAM/CP,GAAUA,EAAMC,MAAMC,OAAOM,SAAO,gBAC5CR,GAAUA,EAAMC,MAAMC,OAAOO,YAAU,WAC5CT,GAAUA,EAAMC,MAAMC,OAAOQ,OAAK,iBAsBjC,uCAED,gDACEV,GAAUA,EAAMC,MAAMU,UAAUC,GAAC,kCAK9B,+HAMC,2IAcX,oEAEQZ,GAAUA,EAAMC,MAAMC,OAAOW,SAAO,iDAMzC,oEAEKb,GAAUA,EAAMC,MAAMC,OAAOY,YAAU,iDAM7C,oEAEMd,GAAUA,EAAMC,MAAMC,OAAOa,YAAU,6BAKrC,sEAEKf,GAAUA,EAAMC,MAAMe,YAAYJ,GAAC,mB,uECxHpD,MAAMK,EAAsB,MACjCC,EAAAA,EAAAA,YAAU,KACRC,QAAQC,IAAI,kMAUV,GACF,C,sBCfJ,6lD,sBCAA,oiD,sBCAA,kwC,sBCAA,g3C","sources":["webpack://ethereum-org-website/./src/components/CodeModal.tsx","webpack://ethereum-org-website/./src/components/TitleCardList.tsx","webpack://ethereum-org-website/./src/hooks/useConsoleEasterEgg.ts","webpack://ethereum-org-website/./src/data/CreateWallet.js","webpack://ethereum-org-website/./src/data/SimpleDomainRegistry.sol","webpack://ethereum-org-website/./src/data/SimpleToken.sol","webpack://ethereum-org-website/./src/data/SimpleWallet.sol"],"sourcesContent":["import React from \"react\"\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n} from \"@chakra-ui/react\"\nexport interface IProps {\n  children?: React.ReactNode\n  isOpen: boolean\n  setIsOpen: (isOpen: boolean) => void\n  title: string\n}\n\nconst CodeModal: React.FC<IProps> = ({\n  children,\n  isOpen,\n  setIsOpen,\n  title,\n}) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      scrollBehavior=\"inside\"\n      variant=\"code\"\n      onClose={() => setIsOpen(false)}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>{title}</ModalHeader>\n        <ModalCloseButton />\n\n        <ModalBody>{children}</ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n\nexport default CodeModal\n","import React from \"react\"\nimport styled from \"@emotion/styled\"\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\"\nimport Icon from \"./Icon\"\nimport Link from \"./Link\"\nimport Translation from \"./Translation\"\nimport { TranslationKey } from \"../utils/translations\"\n\nconst Table = styled.div`\n  background-color: ${(props) => props.theme.colors.background};\n  box-shadow: ${(props) => props.theme.colors.tableBoxShadow};\n  width: 100%;\n  margin-bottom: 2rem;\n  border-radius: 2px;\n`\n\nconst TableHeader = styled.div`\n  background: ${(props) => props.theme.colors.ednBackground};\n  padding: 1rem;\n  border-bottom: 1px solid ${(props) => props.theme.colors.text};\n  font-weight: 600;\n  display: flex;\n  flex-direction: row-reverse;\n  align-items: center;\n  justify-content: space-between;\n`\n\nconst StyledIcon = styled(Icon)`\n  &:hover path {\n    fill: transparent;\n  }\n`\n\nconst Item = styled.div`\n  cursor: pointer;\n  text-decoration: none;\n  display: flex;\n  justify-content: space-between;\n  color: ${(props) => props.theme.colors.text} !important;\n  box-shadow: 0 1px 1px ${(props) => props.theme.colors.tableItemBoxShadow};\n  margin-bottom: 1px;\n  padding: 1rem;\n  width: 100%;\n  color: #000000;\n  &:hover {\n    box-shadow: 0 0 1px ${(props) => props.theme.colors.primary};\n    background: ${(props) => props.theme.colors.primary100};\n    color: ${(props) => props.theme.colors.black} !important;\n  }\n`\n\nconst ItemLink = styled(Link)`\n  text-decoration: none;\n  display: flex;\n  justify-content: space-between;\n  color: ${(props) => props.theme.colors.text} !important;\n  box-shadow: 0 1px 1px ${(props) => props.theme.colors.tableItemBoxShadow};\n  margin-bottom: 1px;\n  padding: 1rem;\n  width: 100%;\n  color: #000000;\n  &:hover {\n    text-decoration: none;\n    box-shadow: 0 0 1px ${(props) => props.theme.colors.primary};\n    background: ${(props) => props.theme.colors.primary100};\n    color: ${(props) => props.theme.colors.black} !important;\n  }\n`\n\nconst ItemTitle = styled.div``\n\nconst ItemDesc = styled.div`\n  font-size: ${(props) => props.theme.fontSizes.s};\n  margin-bottom: 0;\n  opacity: 0.7;\n`\n\nconst LeftContainer = styled.div`\n  flex: 1 1 75%;\n  display: flex;\n  flex-direction: column;\n  margin-right: 2rem;\n`\nconst RightContainer = styled.div`\n  flex: 1 0 25%;\n  display: flex;\n  align-items: center;\n  margin-right: 1rem;\n  flex-wrap: wrap;\n`\n\nconst Image = styled(GatsbyImage)`\n  min-width: 20px;\n  margin-right: 1rem;\n  margin-top: 4px;\n`\n\nconst Red = styled.div`\n  border-radius: 64px;\n  background: ${(props) => props.theme.colors.fail300};\n  margin-right: 0.5rem;\n  width: 12px;\n  height: 12px;\n`\n\nconst Yellow = styled.div`\n  border-radius: 64px;\n  background: ${(props) => props.theme.colors.gridYellow};\n  margin-right: 0.5rem;\n  width: 12px;\n  height: 12px;\n`\n\nconst Green = styled.div`\n  border-radius: 64px;\n  background: ${(props) => props.theme.colors.success300};\n  width: 12px;\n  height: 12px;\n`\n\nconst CodeBoxHeader = styled.div`\n  display: flex;\n  @media (max-width: ${(props) => props.theme.breakpoints.s}) {\n    display: none;\n  }\n`\n\nexport interface ITitleCardItem {\n  title: string\n  description: string\n  caption?: string\n  link?: string\n  image?: IGatsbyImageData\n  alt?: string\n  id?: number\n}\n\nexport interface IProps {\n  content: Array<ITitleCardItem>\n  className?: string\n  clickHandler: (idx: number) => void\n  headerKey: TranslationKey\n  icon: string\n  isCode: boolean\n}\n\nconst TitleCardList: React.FC<IProps> = ({\n  content,\n  className,\n  clickHandler,\n  headerKey,\n  icon,\n  isCode,\n}) => (\n  <Table className={className}>\n    <TableHeader>\n      {icon && <StyledIcon name={icon} />}\n      <Translation id={headerKey} />\n      {isCode && (\n        <CodeBoxHeader>\n          <Red />\n          <Yellow />\n          <Green />\n        </CodeBoxHeader>\n      )}\n    </TableHeader>\n    {content.map((listItem, idx) => {\n      const { title, description, caption, link, image, alt, id } = listItem\n      const isLink = !!link\n      return isLink ? (\n        <ItemLink key={id || idx} to={link}>\n          {image && <Image image={image} alt={alt || \"\"} />}\n          <LeftContainer>\n            <ItemTitle>{title}</ItemTitle>\n\n            <ItemDesc>{description}</ItemDesc>\n          </LeftContainer>\n          {caption && (\n            <RightContainer>\n              <ItemDesc>{caption}</ItemDesc>\n            </RightContainer>\n          )}\n        </ItemLink>\n      ) : (\n        <Item key={idx} onClick={() => clickHandler(idx)}>\n          {image && <Image image={image} alt={alt || \"\"} />}\n          <LeftContainer>\n            <ItemTitle>{title}</ItemTitle>\n\n            <ItemDesc>{description}</ItemDesc>\n          </LeftContainer>\n          {caption && (\n            <RightContainer>\n              <ItemDesc>{caption}</ItemDesc>\n            </RightContainer>\n          )}\n        </Item>\n      )\n    })}\n  </Table>\n)\n\nexport default TitleCardList\n","import { useEffect } from \"react\"\n\nexport const useConsoleEasterEgg = () => {\n  useEffect(() => {\n    console.log(`\nThe Merge is complete.\n\n🐼🐼🐼🐼🐼🐼🐼🐼🐼🐼🐼🐼🐼🐼\n\nWelcome to a greener Ethereum.\n\n🌳🌳🌳🌳🌳🌳🌳🌳🌳🌳🌳🌳🌳🌳\n\nCome help us build it: https://ethereum.org/en/contributing\n    `)\n  })\n}\n","export default \"const ethers = require(\\\"ethers\\\")\\n\\n// Create a wallet instance from a mnemonic...\\nconst mnemonic =\\n  \\\"announce room limb pattern dry unit scale effort smooth jazz weasel alcohol\\\"\\nconst walletMnemonic = ethers.Wallet.fromMnemonic(mnemonic)\\n\\n// ...or from a private key\\nconst walletPrivateKey = new ethers.Wallet(walletMnemonic.privateKey)\\n\\n// ...or create a wallet from a random private key\\nconst randomWallet = ethers.Wallet.createRandom()\\n\\nwalletMnemonic.address\\n// '0x71CB05EE1b1F506fF321Da3dac38f25c0c9ce6E1'\\n\\n// The internal cryptographic components\\nwalletMnemonic.privateKey\\n// '0x1da6847600b0ee25e9ad9a52abbd786dd2502fa4005dd5af9310b7cc7a3b25db'\\nwalletMnemonic.publicKey\\n// '0x04b9e72dfd423bcf95b3801ac93f4392be5ff22143f9980eb78b3a860c...d64'\\n\\nconst tx = {\\n  to: \\\"0x8ba1f109551bD432803012645Ac136ddd64DBA72\\\",\\n  value: ethers.utils.parseEther(\\\"1.0\\\"),\\n}\\n\\n// Sign a transaction\\nwalletMnemonic.signTransaction(tx)\\n// { Promise: '0xf865808080948ba1f109551bd432803012645ac136ddd6...dfc' }\\n\\n// Connect to the Ethereum network using a provider\\nconst wallet = walletMnemonic.connect(provider)\\n\\n// Query the network\\nwallet.getBalance()\\n// { Promise: { BigNumber: \\\"42\\\" } }\\nwallet.getTransactionCount()\\n// { Promise: 0 }\\n\\n// Send ether\\nwallet.sendTransaction(tx)\\n\\n// Content adapted from ethers documentation by Richard Moore\\n// https://docs.ethers.io/v5/api/signer/#Wallet\\n// https://github.com/ethers-io/ethers.js/blob/master/docs/v5/api/signer/README.md#methods\\n// Content is licensed under the Creative Commons License:\\n// https://choosealicense.com/licenses/cc-by-4.0/\\n\";","export default \" // SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\n// This is a smart contract - a program that can be deployed to the Ethereum blockchain.\\ncontract SimpleDomainRegistry {\\n\\n    address public owner;\\n    // Hypothetical cost to register a domain name\\n    uint constant public DOMAIN_NAME_COST = 1 ether;\\n\\n    // A `mapping` is essentially a hash table data structure.\\n    // This `mapping` assigns an address (the domain holder) to a string (the domain name).\\n    mapping (string => address) public domainNames;\\n\\n\\n\\t// When 'SimpleDomainRegistry' contract is deployed,\\n\\t// set the deploying address as the owner of the contract.\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Registers a domain name (if not already registered)\\n    function register(string memory domainName) public payable {\\n        require(msg.value >= DOMAIN_NAME_COST, \\\"Insufficient amount.\\\");\\n        require(domainNames[domainName] == address(0), \\\"Domain name already registered.\\\");\\n        domainNames[domainName] = msg.sender;\\n    }\\n\\n    // Transfers a domain name to another address\\n    function transfer(address receiver, string memory domainName) public {\\n        require(domainNames[domainName] == msg.sender, \\\"Only the domain name owner can transfer.\\\");\\n        domainNames[domainName] = receiver;\\n    }\\n\\n    // Withdraw funds from contract\\n    function withdraw() public {\\n        require(msg.sender == owner, \\\"Only the contract owner can withdraw.\\\");\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n}\\n\";","export default \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\n// This is a smart contract - a program that can be deployed to the Ethereum blockchain.\\ncontract SimpleToken {\\n    // An `address` is comparable to an email address - it's used to identify an account on Ethereum.\\n    address public owner;\\n    uint256 public constant token_supply = 1000000000000;\\n\\n    // A `mapping` is essentially a hash table data structure.\\n    // This `mapping` assigns an unsigned integer (the token balance) to an address (the token holder).\\n    mapping (address => uint) public balances;\\n\\n\\n\\t// When 'SimpleToken' contract is deployed:\\n\\t// 1. set the deploying address as the owner of the contract\\n\\t// 2. set the token balance of the owner to the total token supply\\n    constructor() {\\n        owner = msg.sender;\\n        balances[owner] = token_supply;\\n    }\\n\\n    // Sends an amount of tokens from any caller to any address.\\n    function transfer(address receiver, uint amount) public {\\n        // The sender must have enough tokens to send\\n        require(amount <= balances[msg.sender], \\\"Insufficient balance.\\\");\\n\\n        // Adjusts token balances of the two addresses\\n        balances[msg.sender] -= amount;\\n        balances[receiver] += amount;\\n    }\\n}\\n\";","export default \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\n// This is a smart contract - a program that can be deployed to the Ethereum blockchain.\\ncontract SimpleWallet {\\n    // An 'address' is comparable to an email address - it's used to identify an account on Ethereum.\\n    address payable private owner;\\n\\n    // Events allow for logging of activity on the blockchain.\\n    // Software applications can listen for events in order to react to contract state changes.\\n    event LogDeposit(uint amount, address indexed sender);\\n    event LogWithdrawal(uint amount, address indexed recipient);\\n\\n\\t// When this contract is deployed, set the deploying address as the owner of the contract.\\n    constructor() {\\n        owner = payable(msg.sender);\\n    }\\n\\n    // Send ETH from the function caller to the SimpleWallet contract\\n    function deposit() public payable {\\n        require(msg.value > 0, \\\"Must send ETH.\\\");\\n        emit LogDeposit(msg.value, msg.sender);\\n    }\\n\\n    // Send ETH from the SimpleWallet contract to a chosen recipient\\n    function withdraw(uint amount, address payable recipient) public {\\n        require(msg.sender == owner, \\\"Only the owner of this wallet can withdraw.\\\");\\n        require(address(this).balance >= amount, \\\"Not enough funds.\\\");\\n        emit LogWithdrawal(amount, recipient);\\n        recipient.transfer(amount);\\n    }\\n}\\n\";"],"names":["_ref","children","isOpen","setIsOpen","title","___EmotionJSX","Modal","scrollBehavior","variant","onClose","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","props","theme","colors","background","tableBoxShadow","ednBackground","text","tableItemBoxShadow","primary","primary100","black","fontSizes","s","fail300","gridYellow","success300","breakpoints","useConsoleEasterEgg","useEffect","console","log"],"sourceRoot":""}