{"version":3,"file":"component---src-templates-static-tsx-58f105a2b64ce76428d8.js","mappings":"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","sources":["webpack://ethereum-org-website/./src/components/BannerNotification/index.tsx","webpack://ethereum-org-website/./src/components/Banners/PostMergeBanner.tsx","webpack://ethereum-org-website/./node_modules/@chakra-ui/breadcrumb/dist/index.esm.js","webpack://ethereum-org-website/./src/components/Breadcrumbs.tsx","webpack://ethereum-org-website/./src/components/DocLink.tsx","webpack://ethereum-org-website/./src/components/GhostCard.tsx","webpack://ethereum-org-website/./src/components/MatomoOptOut.tsx","webpack://ethereum-org-website/./src/components/EventCard.tsx","webpack://ethereum-org-website/./src/components/UpcomingEventsList.tsx","webpack://ethereum-org-website/./src/components/SocialListItem.tsx","webpack://ethereum-org-website/./src/components/TranslationChartImage.tsx","webpack://ethereum-org-website/./src/templates/static.tsx"],"sourcesContent":["import React from \"react\"\nimport { Center, FlexProps, useMediaQuery } from \"@chakra-ui/react\"\nimport { lightTheme as oldTheme } from \"../../theme\"\n\nexport interface IProps extends FlexProps {\n  shouldShow?: boolean\n}\n\nconst BannerNotification: React.FC<IProps> = ({\n  children,\n  shouldShow = false,\n  ...props\n}) => {\n  const [isLGScreen] = useMediaQuery(`min-width: ${oldTheme.breakpoints.l}`)\n  return (\n    <>\n      {shouldShow && (\n        <Center\n          maxW={isLGScreen ? oldTheme.variables.maxPageWidth : \"100%\"}\n          w=\"100%\"\n          py=\"4\"\n          px=\"8\"\n          bg=\"primary\"\n          color=\"background\"\n          sx={{\n            a: {\n              color: \"background\",\n            },\n          }}\n          {...props}\n        >\n          {children}\n        </Center>\n      )}\n    </>\n  )\n}\n\nexport default BannerNotification\n","import React from \"react\"\nimport BannerNotification from \"../BannerNotification\"\nimport Translation from \"../Translation\"\n\nimport { TranslationKey } from \"../../utils/translations\"\nimport { Text } from \"@chakra-ui/react\"\n\nexport interface IProps {\n  translationString: TranslationKey\n}\n\nconst PostMergeBanner: React.FC<IProps> = ({ translationString }) => (\n  <BannerNotification\n    shouldShow={true}\n    zIndex={1}\n    textAlign=\"center\"\n    sx={{\n      a: {\n        \"text-decoration\": \"underline\",\n      },\n    }}\n  >\n    <Text maxW=\"100ch\" m={0} p={0}>\n      <Translation id={translationString} />\n    </Text>\n  </BannerNotification>\n)\n\nexport default PostMergeBanner\n","// ../../react-shim.js\nimport React from \"react\";\n\n// ../../utilities/shared-utils/dist/index.esm.js\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \");\n\n// src/breadcrumb.tsx\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { cloneElement } from \"react\";\n\n// src/breadcrumb-context.ts\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [BreadcrumbStylesProvider, useBreadcrumbStyles] = createContext({\n  name: `BreadcrumbStylesContext`,\n  errorMessage: `useBreadcrumbStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Breadcrumb />\" `\n});\n\n// src/breadcrumb.tsx\nvar Breadcrumb = forwardRef(function Breadcrumb2(props, ref) {\n  const styles = useMultiStyleConfig(\"Breadcrumb\", props);\n  const ownProps = omitThemingProps(props);\n  const {\n    children,\n    spacing = \"0.5rem\",\n    separator = \"/\",\n    className,\n    ...rest\n  } = ownProps;\n  const validChildren = getValidChildren(children);\n  const count = validChildren.length;\n  const clones = validChildren.map((child, index) => cloneElement(child, {\n    separator,\n    spacing,\n    isLastChild: count === index + 1\n  }));\n  const _className = cx(\"chakra-breadcrumb\", className);\n  return /* @__PURE__ */ React.createElement(chakra.nav, {\n    ref,\n    \"aria-label\": \"breadcrumb\",\n    className: _className,\n    __css: styles.container,\n    ...rest\n  }, /* @__PURE__ */ React.createElement(BreadcrumbStylesProvider, {\n    value: styles\n  }, /* @__PURE__ */ React.createElement(chakra.ol, {\n    className: \"chakra-breadcrumb__list\"\n  }, clones)));\n});\nBreadcrumb.displayName = \"Breadcrumb\";\n\n// src/breadcrumb-item.tsx\nimport {\n  chakra as chakra4,\n  forwardRef as forwardRef4\n} from \"@chakra-ui/system\";\nimport { getValidChildren as getValidChildren2 } from \"@chakra-ui/react-children-utils\";\n\n// src/breadcrumb-separator.tsx\nimport {\n  chakra as chakra2,\n  forwardRef as forwardRef2\n} from \"@chakra-ui/system\";\nvar BreadcrumbSeparator = forwardRef2(function BreadcrumbSeparator2(props, ref) {\n  const { spacing, ...rest } = props;\n  const styles = useBreadcrumbStyles();\n  const separatorStyles = {\n    mx: spacing,\n    ...styles.separator\n  };\n  return /* @__PURE__ */ React.createElement(chakra2.span, {\n    ref,\n    role: \"presentation\",\n    ...rest,\n    __css: separatorStyles\n  });\n});\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\";\n\n// src/breadcrumb-link.tsx\nimport { chakra as chakra3, forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nvar BreadcrumbLink = forwardRef3(function BreadcrumbLink2(props, ref) {\n  const { isCurrentPage, as, className, href, ...rest } = props;\n  const styles = useBreadcrumbStyles();\n  const sharedProps = {\n    ref,\n    as,\n    className: cx(\"chakra-breadcrumb__link\", className),\n    ...rest\n  };\n  if (isCurrentPage) {\n    return /* @__PURE__ */ React.createElement(chakra3.span, {\n      \"aria-current\": \"page\",\n      __css: styles.link,\n      ...sharedProps\n    });\n  }\n  return /* @__PURE__ */ React.createElement(chakra3.a, {\n    __css: styles.link,\n    href,\n    ...sharedProps\n  });\n});\nBreadcrumbLink.displayName = \"BreadcrumbLink\";\n\n// src/breadcrumb-item.tsx\nimport { cloneElement as cloneElement2 } from \"react\";\nvar BreadcrumbItem = forwardRef4(function BreadcrumbItem2(props, ref) {\n  const {\n    isCurrentPage,\n    separator,\n    isLastChild,\n    spacing,\n    children,\n    className,\n    ...rest\n  } = props;\n  const validChildren = getValidChildren2(children);\n  const clones = validChildren.map((child) => {\n    if (child.type === BreadcrumbLink) {\n      return cloneElement2(child, {\n        isCurrentPage\n      });\n    }\n    if (child.type === BreadcrumbSeparator) {\n      return cloneElement2(child, {\n        spacing,\n        children: child.props.children || separator\n      });\n    }\n    return child;\n  });\n  const styles = useBreadcrumbStyles();\n  const itemStyles = {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    ...styles.item\n  };\n  const _className = cx(\"chakra-breadcrumb__list-item\", className);\n  return /* @__PURE__ */ React.createElement(chakra4.li, {\n    ref,\n    className: _className,\n    ...rest,\n    __css: itemStyles\n  }, clones, !isLastChild && /* @__PURE__ */ React.createElement(BreadcrumbSeparator, {\n    spacing\n  }, separator));\n});\nBreadcrumbItem.displayName = \"BreadcrumbItem\";\nexport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbSeparator,\n  useBreadcrumbStyles\n};\n","import React from \"react\"\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbProps,\n} from \"@chakra-ui/react\"\nimport { useIntl } from \"react-intl\"\n\nimport Link from \"./Link\"\nimport { isLang } from \"../utils/languages\"\nimport { isTranslationKey, translateMessageId } from \"../utils/translations\"\n\nexport interface IProps extends BreadcrumbProps {\n  slug: string\n  startDepth?: number\n}\n\n// Generate crumbs from slug\n// e.g. \"/en/eth2/proof-of-stake/\" will generate:\n// [\n//   { fullPath: \"/en/\", text: \"HOME\" },\n//   { fullPath: \"/en/eth2/\", text: \"ETH2\" },\n//   { fullPath: \"/en/eth2/proof-of-stake/\", text: \"PROOF OF STAKE\" },\n// ]\n// `startDepth` will trim breadcrumbs\n// e.g. startDepth=1 will generate:\n// [\n//   { fullPath: \"/en/eth2/\", text: \"ETH2\" },\n//   { fullPath: \"/en/eth2/proof-of-stake/\", text: \"PROOF OF STAKE\" },\n// ]\nconst Breadcrumbs: React.FC<IProps> = ({\n  slug,\n  startDepth = 0,\n  ...restProps\n}) => {\n  const intl = useIntl()\n\n  const slugChunk = slug.split(\"/\")\n  const sliced = slugChunk.filter((item) => !!item).slice(startDepth)\n\n  const crumbs = sliced.map((path, idx) => {\n    // If homepage (e.g. \"en\"), set text to \"home\" translation\n    const text = isLang(path)\n      ? translateMessageId(\"page-index-meta-title\", intl)\n      : isTranslationKey(path)\n      ? translateMessageId(path, intl)\n      : \"\"\n\n    return {\n      fullPath: slugChunk.slice(0, idx + 2 + startDepth).join(\"/\") + \"/\",\n      text: text.toUpperCase(),\n    }\n  })\n\n  return (\n    <Breadcrumb\n      dir=\"auto\"\n      position=\"relative\"\n      zIndex=\"1\"\n      mb={8}\n      sx={{\n        // TODO: Move this to `listProps` upon upgrading `@chakra-ui/react`\n        // to at least v2.4.2\n        ol: {\n          m: 0,\n          lineHeight: 1,\n        },\n      }}\n      {...restProps}\n    >\n      {crumbs.map((crumb, idx) => {\n        const isCurrentPage = slug === crumb.fullPath\n        return (\n          <BreadcrumbItem\n            key={idx}\n            isCurrentPage={isCurrentPage}\n            color=\"textTableOfContents\"\n            fontSize=\"sm\"\n            letterSpacing=\"wider\"\n            lineHeight=\"140%\"\n            m={0}\n          >\n            <BreadcrumbLink\n              as={Link}\n              to={crumb.fullPath}\n              isPartiallyActive={isCurrentPage}\n              _hover={{ color: \"primary\", textDecor: \"none\" }}\n              _active={{ color: \"primary\" }}\n            >\n              {crumb.text}\n            </BreadcrumbLink>\n          </BreadcrumbItem>\n        )\n      })}\n    </Breadcrumb>\n  )\n}\n\nexport default Breadcrumbs\n","import React from \"react\"\nimport {\n  Icon,\n  Box,\n  Text,\n  Flex,\n  LinkBox,\n  LinkOverlay,\n  useToken,\n} from \"@chakra-ui/react\"\nimport { AiOutlineArrowRight } from \"react-icons/ai\"\nimport Emoji from \"./Emoji\"\nimport Link from \"./Link\"\n\nexport interface IProps {\n  children?: React.ReactNode\n  to: string\n  isExternal?: boolean\n}\n\nconst DocLink: React.FC<IProps> = ({ to, children, isExternal = false }) => {\n  const linkBoxShadowColor = useToken(\"colors\", \"primary\")\n\n  return (\n    <LinkBox\n      padding={4}\n      borderRadius=\"sm\"\n      color=\"text\"\n      border=\"1px\"\n      borderStyle=\"solid\"\n      borderColor=\"border\"\n      _hover={{\n        background: \"tableBackgroundHover\",\n        borderRadius: \"base\",\n        boxShadow: `0 0 1px ${linkBoxShadowColor}`,\n      }}\n    >\n      <Flex\n        zIndex={1}\n        display=\"flex\"\n        flexDirection=\"row\"\n        flex={1}\n        justifyContent=\"space-between\"\n      >\n        <Flex align=\"center\">\n          <Emoji fontSize=\"md\" mr={4} text=\":page_with_curl:\" />\n        </Flex>\n        <Box flex={1} flexDirection=\"column\">\n          <LinkOverlay\n            href={to}\n            as={Link}\n            isExternal={isExternal}\n            textDecoration=\"none\"\n            _hover={{ textDecoration: \"none\" }}\n            hideArrow\n          >\n            <Text color=\"text300\" fontWeight=\"semibold\" margin={0}>\n              {children}\n            </Text>\n          </LinkOverlay>\n        </Box>\n        <Icon\n          as={AiOutlineArrowRight}\n          alignSelf=\"center\"\n          minWidth={8}\n          boxSize={6}\n          marginX={6}\n          _groupHover={{\n            fill: \"primary\",\n            transition: \"transform 0.1s\",\n            transform: \"scale(1.2)\",\n            rotate: isExternal ? \"-45deg\" : \"0\",\n          }}\n        />\n      </Flex>\n    </LinkBox>\n  )\n}\n\nexport default DocLink\n","import React from \"react\"\nimport { Box } from \"@chakra-ui/react\"\n\nexport interface IProps {\n  children?: React.ReactNode\n  className?: string\n}\n\nconst GhostCard: React.FC<IProps> = ({ children, className }) => (\n  <Box position=\"relative\" mt=\"2\" alignSelf=\"stretch\" className={className}>\n    <Box\n      zIndex=\"hide\"\n      position=\"absolute\"\n      backgroundColor=\"ghostCardGhost\"\n      bottom=\"2\"\n      left=\"2\"\n      border=\"1px solid\"\n      borderColor=\"border\"\n      borderRadius=\"2px\"\n      height=\"full\"\n      width=\"full\"\n    />\n    <Box\n      className=\"ghost-card-base\"\n      height=\"full\"\n      width=\"full\"\n      borderRadius=\"2px\"\n      zIndex={2}\n      padding=\"6\"\n      background=\"ghostCardBackground\"\n      border=\"1px solid\"\n      borderColor=\"border\"\n      textAlign=\"left\"\n    >\n      {children}\n    </Box>\n  </Box>\n)\n\nexport default GhostCard\n","import React, { useState, useEffect } from \"react\"\nimport { MATOMO_LS_KEY } from \"../utils/matomo\"\nimport { Checkbox, Flex, Text } from \"@chakra-ui/react\"\n\nexport interface IProps {}\n\nconst MatomoOptOut: React.FC<IProps> = () => {\n  const [loading, setLoading] = useState<boolean>(true)\n  const [isOptedOut, setIsOptedOut] = useState<boolean>(false)\n\n  useEffect(() => {\n    // Load user choice for Matomo tracking from localStorage\n    const savedOptOut = JSON.parse(localStorage.getItem(MATOMO_LS_KEY)!)\n    // If saved opt-out selection is `true` then set this as local checkbox state\n    // Else, instantiate localStorage value to `false`\n    if (savedOptOut) {\n      setIsOptedOut(true)\n    } else {\n      localStorage.setItem(MATOMO_LS_KEY, \"false\")\n    }\n    setLoading(false)\n  }, [])\n\n  const handleCheckbox = ({\n    target: { checked },\n  }: React.ChangeEvent<HTMLInputElement>): void => {\n    // Set local opt-out state based on check mark\n    // Note: `checked` in the UI refers to being opted-in\n    setIsOptedOut(!checked)\n    // Save selection to localStorage\n    localStorage.setItem(MATOMO_LS_KEY, String(!checked))\n  }\n  return (\n    <Flex\n      border=\"1px solid\"\n      borderColor=\"border\"\n      bgColor=\"background\"\n      borderRadius=\"base\"\n      p={6}\n      direction=\"column\"\n      mb={4}\n      mt={8}\n      align=\"flex-start\"\n      justify=\"space-between\"\n    >\n      <Text color=\"fail\">\n        You can opt out of being tracked by Matomo Analytics and prevent the\n        website from analysing the actions you take using the website. This will\n        prevent us from learning from your actions and creating a better website\n        experience for you and other users.\n      </Text>\n      {loading ? (\n        \"Loading preferences...\"\n      ) : (\n        <Checkbox\n          type=\"checkbox\"\n          id=\"matomo\"\n          isChecked={!isOptedOut}\n          onChange={handleCheckbox}\n          mr={2}\n          size=\"md\"\n        >\n          {isOptedOut\n            ? \"You are opted out. Check this box to opt-in.\"\n            : \"You are not opted out. Uncheck this box to opt-out.\"}\n        </Checkbox>\n      )}\n    </Flex>\n  )\n}\n\nexport default MatomoOptOut\n","import React from \"react\"\nimport Emoji from \"./Emoji\"\nimport ButtonLink from \"./ButtonLink\"\nimport { Box, Text, Heading } from \"@chakra-ui/react\"\n\nconst clearStyles = {\n  content: '\"\"',\n  display: \"block\",\n  width: \"100%\",\n  clear: \"both\",\n}\n\nexport interface IProps {\n  title: string\n  to: string\n  date: string\n  description: string\n  className?: string\n  location: string\n  isEven: boolean\n}\n\nconst EventCard: React.FC<IProps> = ({\n  title,\n  to,\n  date,\n  description,\n  className,\n  location,\n  isEven,\n}) => (\n  <Box\n    className={className}\n    position=\"relative\"\n    marginTop={{ base: \"30px\", md: 0 }}\n    _before={clearStyles}\n    _after={clearStyles}\n  >\n    <Box\n      w=\"24px\"\n      h=\"24px\"\n      position=\"absolute\"\n      top=\"0\"\n      left=\"50%\"\n      overflow=\"hidden\"\n      marginLeft=\"-12px\"\n      backgroundColor=\"primary\"\n      display={{ base: \"none\", md: \"block\" }}\n    />\n    <Box\n      width={{ base: \"100%\", md: \"45%\" }}\n      padding={6}\n      backgroundColor=\"ednBackground\"\n      borderRadius=\"sm\"\n      border=\"1px solid\"\n      borderColor=\"lightBorder\"\n      float={isEven ? \"right\" : { base: \"right\", md: \"none\" }}\n      marginTop={isEven ? { base: 0, md: \"-25%\" } : 0}\n      _before={{\n        content: '\"\"',\n        position: \"absolute\",\n        top: \"10px\",\n        width: 0,\n        height: \"3px\",\n        display: { base: \"none\", md: \"inline\" },\n        ...(isEven\n          ? {\n              left: \"inherit\",\n              right: \"45%\",\n              borderLeft: 0,\n              borderRight: \"25px solid\",\n            }\n          : {\n              left: \"45%\",\n              borderLeft: \"25px solid\",\n              borderRight: 0,\n            }),\n        borderColor: \"primary\",\n      }}\n    >\n      <Text color=\"primary\" marginBottom={0} textAlign=\"right\">\n        {date}\n        <Emoji text=\":spiral_calendar:\" fontSize=\"md\" marginLeft={2} />\n      </Text>\n      <Text marginBottom={0} textAlign=\"right\">\n        <Text as=\"span\" opacity={0.6}>\n          {location}\n        </Text>\n        <Emoji text=\":round_pushpin:\" fontSize=\"md\" marginLeft={2} />\n      </Text>\n      <Heading as=\"h3\" marginTop={0} fontWeight=\"semibold\" lineHeight={1.4}>\n        {title}\n      </Heading>\n      <Text opacity={0.8}>{description}</Text>\n      <ButtonLink to={to}>View Event</ButtonLink>\n    </Box>\n  </Box>\n)\n\nexport default EventCard\n","// Libraries\nimport React, { useEffect, useState } from \"react\"\nimport { Box } from \"@chakra-ui/react\"\n\n// Components\nimport EventCard from \"./EventCard\"\nimport InfoBanner from \"./InfoBanner\"\nimport Link from \"./Link\"\nimport Translation from \"./Translation\"\nimport Button from \"./Button\"\n\n// Data\nimport events from \"../data/community-events.json\"\n\ninterface ICommunityEventData {\n  title: string\n  to: string\n  sponsor: string | null\n  location: string\n  description: string\n  startDate: string\n  endDate: string\n}\n\ninterface IOrderedUpcomingEventType extends ICommunityEventData {\n  date: string\n  formattedDetails: string\n}\n\nexport interface IProps {}\n\nconst UpcomingEventsList: React.FC<IProps> = () => {\n  const eventsPerLoad = 10\n  const [orderedUpcomingEvents, setOrderedUpcomingEvents] = useState<\n    Array<IOrderedUpcomingEventType>\n  >([])\n  const [maxRange, setMaxRange] = useState<number>(eventsPerLoad)\n  const [isVisible, setIsVisible] = useState<boolean>(true)\n\n  // Create Date object from each YYYY-MM-DD JSON date string\n  const dateParse = (dateString: string): Date => {\n    const parts = dateString.split(\"-\")\n    return new Date(\n      parseInt(parts[0]),\n      parseInt(parts[1]) - 1,\n      parseInt(parts[2])\n    )\n  }\n\n  useEffect(() => {\n    const eventsList: Array<ICommunityEventData> = [...events]\n    const yesterday = new Date()\n    yesterday.setDate(yesterday.getDate() - 1)\n\n    // Remove events that have ended\n    const upcomingEvents = eventsList.filter(({ endDate }) => {\n      return dateParse(endDate) > yesterday\n    })\n\n    // Sort events by start date\n    const orderedEvents = upcomingEvents.sort(\n      (a, b) =>\n        dateParse(a.startDate).getTime() - dateParse(b.startDate).getTime()\n    )\n\n    // Add formatted string to display\n    const formattedEvents = orderedEvents.map((event) => {\n      const dateRange =\n        event.startDate === event.endDate\n          ? dateParse(event.startDate).toLocaleDateString()\n          : `${dateParse(event.startDate).toLocaleDateString()} - ${dateParse(\n              event.endDate\n            ).toLocaleDateString()}`\n\n      const details = `${event.sponsor ? \"(\" + event.sponsor + \")\" : \"\"} ${\n        event.description\n      }`\n\n      return {\n        ...event,\n        date: dateRange,\n        formattedDetails: details,\n      }\n    })\n\n    setOrderedUpcomingEvents(formattedEvents)\n  }, [])\n\n  const loadMoreEvents = () => {\n    setMaxRange((counter) => counter + eventsPerLoad)\n    setIsVisible(maxRange + eventsPerLoad <= orderedUpcomingEvents.length)\n  }\n\n  if (orderedUpcomingEvents.length === 0) {\n    return (\n      <InfoBanner emoji=\":information_source:\">\n        <Translation id=\"page-community-upcoming-events-no-events\" />{\" \"}\n        <Link to=\"https://github.com/ethereum/ethereum-org-website/blob/dev/src/data/community-events.json\">\n          <Translation id=\"page-community-please-add-to-page\" />\n        </Link>\n      </InfoBanner>\n    )\n  }\n\n  return (\n    <>\n      <Box\n        width=\"100%\"\n        margin=\"30px auto\"\n        position=\"relative\"\n        padding=\"0 10px\"\n        transition=\"all 0.4s ease\"\n        _before={{\n          content: '\"\"',\n          position: \"absolute\",\n          width: \"3px\",\n          height: \"full\",\n          background: \"primary\",\n          top: 0,\n          left: \"50%\",\n        }}\n        _after={{\n          content: '\"\"',\n          display: \"table\",\n          width: \"100%\",\n          clear: \"both\",\n        }}\n      >\n        {orderedUpcomingEvents\n          ?.slice(0, maxRange)\n          .map(({ title, to, formattedDetails, date, location }, idx) => {\n            return (\n              <EventCard\n                key={idx}\n                title={title}\n                to={to}\n                date={date}\n                description={formattedDetails}\n                location={location}\n                isEven={(idx + 1) % 2 === 0}\n              />\n            )\n          })}\n      </Box>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        maxWidth=\"620px\"\n        marginTop=\"5\"\n      >\n        {isVisible && (\n          <Button onClick={loadMoreEvents}>\n            <Translation id=\"page-community-upcoming-events-load-more\" />\n          </Button>\n        )}\n      </Box>\n    </>\n  )\n}\n\nexport default UpcomingEventsList\n","// Libraries\nimport React from \"react\"\nimport { Flex, Box, Icon } from \"@chakra-ui/react\"\nimport {\n  FaTwitter,\n  FaYoutube,\n  FaDiscord,\n  FaRedditAlien,\n  FaStackExchange,\n  FaGlobe,\n} from \"react-icons/fa\"\n\nconst socialColors = {\n  reddit: \"#ff4301\",\n  twitter: \"#1da1f2\",\n  youtube: \"#ff0000\",\n  discord: \"#7289da\",\n  stackExchange: \"#48a2da\",\n}\n\nconst icons = {\n  reddit: FaRedditAlien,\n  twitter: FaTwitter,\n  youtube: FaYoutube,\n  discord: FaDiscord,\n  stackExchange: FaStackExchange,\n  webpage: FaGlobe,\n}\n\nexport interface IProps {\n  children?: React.ReactNode\n  socialIcon: keyof typeof icons\n}\n\nconst SocialListItem: React.FC<IProps> = ({ children, socialIcon }) => {\n  return (\n    <Flex w=\"100%\" py=\"2\" px=\"0\" align=\"center\">\n      <Icon\n        as={icons[socialIcon]}\n        pr={3}\n        boxSize={10}\n        color={socialColors[socialIcon]}\n      />\n      <Box\n        fontStyle=\"italic\"\n        sx={{\n          \"> a\": {\n            fontStyle: \"normal\",\n          },\n        }}\n      >\n        {children}\n      </Box>\n    </Flex>\n  )\n}\n\nexport default SocialListItem\n","import React from \"react\"\nimport { Image, useColorModeValue } from \"@chakra-ui/react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport { getImage } from \"../utils/image\"\n\nexport interface IProps {}\n\nconst TranslationChartImage: React.FC<IProps> = () => {\n  const data = useStaticQuery(graphql`\n    {\n      pageviewsLight: file(\n        relativePath: { eq: \"translation-program/pageviews-light.png\" }\n      ) {\n        childImageSharp {\n          gatsbyImageData(height: 500, placeholder: BLURRED, quality: 100)\n        }\n      }\n      pageviewsDark: file(\n        relativePath: { eq: \"translation-program/pageviews-dark.png\" }\n      ) {\n        childImageSharp {\n          gatsbyImageData(height: 500, placeholder: BLURRED, quality: 100)\n        }\n      }\n    }\n  `)\n\n  const ethImage = useColorModeValue(data.pageviewsLight, data.pageviewsDark)\n\n  return (\n    <Image\n      as={GatsbyImage}\n      image={getImage(ethImage)!}\n      alt=\"\"\n      fit=\"contain\"\n      minW=\"263px\"\n    />\n  )\n}\n\nexport default TranslationChartImage\n","import React from \"react\"\nimport { graphql, PageProps } from \"gatsby\"\nimport { useIntl } from \"react-intl\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\nimport styled from \"@emotion/styled\"\nimport { Badge } from \"@chakra-ui/react\"\n\nimport ButtonLink from \"../components/ButtonLink\"\nimport Breadcrumbs from \"../components/Breadcrumbs\"\nimport Card from \"../components/Card\"\nimport Callout from \"../components/Callout\"\nimport Contributors from \"../components/Contributors\"\nimport FeedbackCard from \"../components/FeedbackCard\"\nimport InfoBanner from \"../components/InfoBanner\"\nimport Link from \"../components/Link\"\nimport MarkdownTable from \"../components/MarkdownTable\"\nimport Logo from \"../components/Logo\"\nimport MeetupList from \"../components/MeetupList\"\nimport PageMetadata from \"../components/PageMetadata\"\nimport RandomAppList from \"../components/RandomAppList\"\nimport ExpandableCard from \"../components/ExpandableCard\"\nimport Roadmap from \"../components/Roadmap\"\nimport TableOfContents, {\n  Item as ItemTableOfContents,\n} from \"../components/TableOfContents\"\nimport Translation from \"../components/Translation\"\nimport SectionNav from \"../components/SectionNav\"\nimport DocLink from \"../components/DocLink\"\nimport GhostCard from \"../components/GhostCard\"\nimport MatomoOptOut from \"../components/MatomoOptOut\"\nimport {\n  Divider,\n  Paragraph,\n  Header1,\n  Header2,\n  Header3,\n  Header4,\n  ListItem,\n  CardContainer,\n} from \"../components/SharedStyledComponents\"\nimport Emoji from \"../components/OldEmoji\"\nimport UpcomingEventsList from \"../components/UpcomingEventsList\"\nimport Icon from \"../components/Icon\"\nimport SocialListItem from \"../components/SocialListItem\"\nimport YouTube from \"../components/YouTube\"\nimport TranslationChartImage from \"../components/TranslationChartImage\"\nimport PostMergeBanner from \"../components/Banners/PostMergeBanner\"\nimport EnergyConsumptionChart from \"../components/EnergyConsumptionChart\"\nimport QuizWidget from \"../components/Quiz/QuizWidget\"\n\nimport { getLocaleTimestamp } from \"../utils/time\"\nimport { isLangRightToLeft, TranslationKey } from \"../utils/translations\"\nimport { Lang } from \"../utils/languages\"\nimport { Context } from \"../types\"\n\nconst Container = styled.div`\n  width: 100%;\n`\n\nconst Page = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  margin: 0 auto 4rem;\n  padding: 2rem;\n\n  @media (min-width: ${(props) => props.theme.breakpoints.l}) {\n    padding-top: 4rem;\n  }\n`\n\n// Apply styles for classes within markdown here\nconst ContentContainer = styled.article`\n  max-width: ${(props) => props.theme.breakpoints.m};\n  width: 100%;\n\n  .featured {\n    padding-left: 1rem;\n    margin-left: -1rem;\n    border-left: 1px dotted ${(props) => props.theme.colors.primary};\n  }\n\n  .citation {\n    p {\n      color: ${(props) => props.theme.colors.text200};\n    }\n  }\n`\n\nconst LastUpdated = styled.p`\n  color: ${(props) => props.theme.colors.text200};\n`\n\nconst Pre = styled.pre`\n  max-width: 100%;\n  overflow-x: scroll;\n  background-color: ${(props) => props.theme.colors.preBackground};\n  border-radius: 0.25rem;\n  padding: 1rem;\n  border: 1px solid ${(props) => props.theme.colors.preBorder};\n  white-space: pre-wrap;\n`\n\nconst MobileTableOfContents = styled(TableOfContents)`\n  position: relative;\n  z-index: 2;\n`\n\nconst HR = styled.hr`\n  width: 100%;\n  margin: 2rem 0rem;\n  margin-bottom: 1rem;\n  display: inline-block;\n  position: inherit;\n  background: ${(props) => props.theme.colors.border};\n`\n\n// Note: you must pass components to MDXProvider in order to render them in markdown files\n// https://www.gatsbyjs.com/plugins/gatsby-plugin-mdx/#mdxprovider\nconst components = {\n  a: Link,\n  h1: Header1,\n  h2: Header2,\n  h3: Header3,\n  h4: Header4,\n  p: Paragraph,\n  li: ListItem,\n  pre: Pre,\n  hr: HR,\n  table: MarkdownTable,\n  MeetupList,\n  RandomAppList,\n  Roadmap,\n  Link,\n  Logo,\n  ButtonLink,\n  Contributors,\n  InfoBanner,\n  FeedbackCard,\n  Card,\n  Divider,\n  SectionNav,\n  Badge,\n  Emoji,\n  DocLink,\n  ExpandableCard,\n  CardContainer,\n  GhostCard,\n  UpcomingEventsList,\n  Icon,\n  SocialListItem,\n  MatomoOptOut,\n  Callout,\n  YouTube,\n  TranslationChartImage,\n  EnergyConsumptionChart,\n  QuizWidget,\n}\n\nconst StaticPage = ({\n  data: { siteData, pageData: mdx },\n  pageContext: { relativePath },\n}: PageProps<Queries.StaticPageQuery, Context>) => {\n  const intl = useIntl()\n\n  if (!siteData || !mdx?.frontmatter || !mdx.parent)\n    throw new Error(\n      \"Static page template query does not return expected values\"\n    )\n  if (!mdx?.frontmatter?.title)\n    throw new Error(\"Required `title` property missing for static template\")\n  if (!relativePath)\n    throw new Error(\"Required `relativePath` is missing on pageContext\")\n\n  const isRightToLeft = isLangRightToLeft(mdx.frontmatter.lang as Lang)\n\n  const showPostMergeBanner = !!mdx.frontmatter.postMergeBannerTranslation\n  const postMergeBannerTranslationString = mdx.frontmatter\n    .postMergeBannerTranslation as TranslationKey | null\n\n  // FIXME: remove this any, currently not sure how to fix the ts error\n  const parent: any = mdx.parent\n  const lastUpdatedDate = parent.fields\n    ? parent.fields.gitLogLatestDate\n    : parent.mtime\n\n  const tocItems = mdx.tableOfContents?.items as Array<ItemTableOfContents>\n  const { editContentUrl } = siteData.siteMetadata || {}\n  const absoluteEditPath = `${editContentUrl}${relativePath}`\n\n  const slug = mdx.fields?.slug || \"\"\n\n  return (\n    <Container>\n      {showPostMergeBanner && (\n        <PostMergeBanner\n          translationString={postMergeBannerTranslationString!}\n        />\n      )}\n      <Page dir={isRightToLeft ? \"rtl\" : \"ltr\"}>\n        <PageMetadata\n          title={mdx.frontmatter.title}\n          description={mdx.frontmatter.description}\n        />\n        <ContentContainer>\n          <Breadcrumbs slug={slug} />\n          <LastUpdated\n            dir={isLangRightToLeft(intl.locale as Lang) ? \"rtl\" : \"ltr\"}\n          >\n            <Translation id=\"page-last-updated\" />:{\" \"}\n            {getLocaleTimestamp(intl.locale as Lang, lastUpdatedDate)}\n          </LastUpdated>\n          <MobileTableOfContents\n            editPath={absoluteEditPath}\n            items={tocItems}\n            isMobile={true}\n            maxDepth={mdx.frontmatter.sidebarDepth!}\n            hideEditButton={!!mdx.frontmatter.hideEditButton}\n          />\n          <MDXProvider components={components}>\n            <MDXRenderer>{mdx.body}</MDXRenderer>\n          </MDXProvider>\n          <FeedbackCard isArticle />\n        </ContentContainer>\n        {tocItems && (\n          <TableOfContents\n            editPath={absoluteEditPath}\n            items={tocItems}\n            maxDepth={mdx.frontmatter.sidebarDepth!}\n            hideEditButton={!!mdx.frontmatter.hideEditButton}\n          />\n        )}\n      </Page>\n    </Container>\n  )\n}\n\nexport const staticPageQuery = graphql`\n  query StaticPage($relativePath: String) {\n    siteData: site {\n      siteMetadata {\n        editContentUrl\n      }\n    }\n    pageData: mdx(fields: { relativePath: { eq: $relativePath } }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        description\n        lang\n        sidebarDepth\n        isOutdated\n        postMergeBannerTranslation\n        hideEditButton\n      }\n      body\n      tableOfContents\n      parent {\n        ... on File {\n          mtime\n          fields {\n            gitLogLatestDate\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default StaticPage\n"],"names":["_ref","children","shouldShow","props","isLGScreen","useMediaQuery","oldTheme","___EmotionJSX","Center","maxW","w","py","px","bg","color","sx","a","translationString","BannerNotification","zIndex","textAlign","Text","m","p","Translation","id","cx","classNames","filter","Boolean","join","BreadcrumbStylesProvider","useBreadcrumbStyles","name","errorMessage","Breadcrumb","ref","styles","ownProps","spacing","separator","className","rest","validChildren","count","length","clones","map","child","index","cloneElement","isLastChild","_className","__css","container","value","displayName","BreadcrumbSeparator","separatorStyles","mx","role","BreadcrumbLink","isCurrentPage","as","href","sharedProps","link","BreadcrumbItem","type","itemStyles","display","alignItems","item","slug","startDepth","restProps","intl","useIntl","slugChunk","split","crumbs","slice","path","idx","text","isLang","translateMessageId","isTranslationKey","fullPath","toUpperCase","dir","position","mb","ol","lineHeight","crumb","key","fontSize","letterSpacing","Link","to","isPartiallyActive","_hover","textDecor","_active","isExternal","linkBoxShadowColor","useToken","LinkBox","padding","borderRadius","border","borderStyle","borderColor","background","boxShadow","Flex","flexDirection","flex","justifyContent","align","Emoji","mr","Box","LinkOverlay","textDecoration","hideArrow","fontWeight","margin","Icon","AiOutlineArrowRight","alignSelf","minWidth","boxSize","marginX","_groupHover","fill","transition","transform","rotate","mt","backgroundColor","bottom","left","height","width","loading","setLoading","useState","isOptedOut","setIsOptedOut","useEffect","JSON","parse","localStorage","getItem","MATOMO_LS_KEY","setItem","bgColor","direction","justify","Checkbox","isChecked","onChange","target","checked","String","size","clearStyles","content","clear","title","date","description","location","isEven","marginTop","base","md","_before","_after","h","top","overflow","marginLeft","float","right","borderLeft","borderRight","marginBottom","opacity","Heading","ButtonLink","orderedUpcomingEvents","setOrderedUpcomingEvents","maxRange","setMaxRange","isVisible","setIsVisible","dateParse","dateString","parts","Date","parseInt","eventsList","events","yesterday","setDate","getDate","formattedEvents","endDate","sort","b","startDate","getTime","event","dateRange","toLocaleDateString","details","sponsor","formattedDetails","InfoBanner","emoji","EventCard","maxWidth","Button","onClick","counter","socialColors","reddit","twitter","youtube","discord","stackExchange","icons","FaRedditAlien","FaTwitter","FaYoutube","FaDiscord","FaStackExchange","webpage","FaGlobe","socialIcon","pr","fontStyle","data","useStaticQuery","ethImage","useColorModeValue","pageviewsLight","pageviewsDark","Image","GatsbyImage","image","getImage","alt","fit","minW","Container","Page","theme","breakpoints","l","ContentContainer","colors","primary","text200","LastUpdated","Pre","preBackground","preBorder","MobileTableOfContents","TableOfContents","HR","components","h1","Header1","h2","Header2","h3","Header3","h4","Header4","Paragraph","li","ListItem","pre","hr","table","MarkdownTable","MeetupList","RandomAppList","Roadmap","Logo","Contributors","FeedbackCard","Card","Divider","SectionNav","Badge","DocLink","ExpandableCard","CardContainer","GhostCard","UpcomingEventsList","SocialListItem","MatomoOptOut","Callout","YouTube","TranslationChartImage","EnergyConsumptionChart","QuizWidget","siteData","pageData","mdx","pageContext","relativePath","frontmatter","parent","Error","_mdx$frontmatter","isRightToLeft","isLangRightToLeft","lang","showPostMergeBanner","postMergeBannerTranslation","postMergeBannerTranslationString","lastUpdatedDate","fields","gitLogLatestDate","mtime","tocItems","tableOfContents","_mdx$tableOfContents","items","editContentUrl","siteMetadata","absoluteEditPath","_mdx$fields","PostMergeBanner","PageMetadata","Breadcrumbs","locale","getLocaleTimestamp","editPath","isMobile","maxDepth","sidebarDepth","hideEditButton","MDXProvider","MDXRenderer","body","isArticle"],"sourceRoot":""}