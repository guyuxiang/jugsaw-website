{"version":3,"file":"42250f79-f4c8a302416cc828e96d.js","mappings":"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","sources":["webpack://ethereum-org-website/./src/pages/developers/local-environment.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport styled from \"@emotion/styled\"\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\"\nimport { graphql, PageProps } from \"gatsby\"\nimport { useIntl } from \"react-intl\"\nimport { shuffle } from \"lodash\"\n\n// import ActionCard from \"../../components/ActionCard\"\n// import Callout from \"../../components/Callout\"\n// import Card from \"../../components/Card\"\n// import Link from \"../../components/Link\"\n// import ButtonLink from \"../../components/ButtonLink\"\nimport Translation from \"../../components/Translation\"\nimport PageMetadata from \"../../components/PageMetadata\"\nimport ProductCard from \"../../components/ProductCard\"\nimport {\n  Content,\n  CardGrid,\n  // Divider,\n  // Intro,\n  Page,\n  // InfoBanner,\n} from \"../../components/SharedStyledComponents\"\nimport FeedbackCard from \"../../components/FeedbackCard\"\n\nimport { translateMessageId, TranslationKey } from \"../../utils/translations\"\nimport { getImage } from \"../../utils/image\"\n\nimport { Context } from \"../../types\"\n\nconst StyledPage = styled(Page)`\n  margin-top: 4rem;\n`\n\nconst HeroContent = styled(Content)`\n  margin-bottom: 2rem;\n  justify-content: center;\n  @media (max-width: ${(props) => props.theme.breakpoints.xl}) {\n    padding: 0 2rem 2rem;\n  }\n`\n\nconst Slogan = styled.h1`\n  font-style: normal;\n  font-weight: normal;\n  font-family: ${(props) => props.theme.fonts.monospace};\n  text-transform: uppercase;\n  font-weight: 600;\n  font-size: 2rem;\n  line-height: 140%;\n  text-align: center;\n  margin: 0 0 1.625rem;\n`\n\n// const Subtitle = styled.div`\n//   font-size: 1.25rem;\n//   line-height: 140%;\n//   color: ${(props) => props.theme.colors.text200};\n//   margin-bottom: 0.5rem;\n// `\n\nconst SubSlogan = styled.p`\n  font-size: 1.25rem;\n  line-height: 140%;\n  color: ${(props) => props.theme.colors.text200};\n  margin-bottom: 0.5rem;\n  text-align: center;\n`\n\n// const HeroContainer = styled.div`\n//   display: flex;\n//   justify-content: space-between;\n//   @media (max-width: ${(props) => props.theme.breakpoints.m}) {\n//     flex-direction: column-reverse;\n//   }\n// `\nconst TwoColumnContent = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  justify-content: space-between;\n  @media (max-width: ${(props) => props.theme.breakpoints.l}) {\n    flex-direction: column-reverse;\n    align-items: flex-start;\n  }\n`\n\nconst Column = styled.div`\n  flex: 1 0 33%;\n  justify-content: flex-end;\n  @media (max-width: ${(props) => props.theme.breakpoints.m}) {\n    max-width: 100%;\n  }\n  margin-bottom: 1.5rem;\n  margin-right: 2rem;\n  width: 100%;\n`\n\nconst Hero = styled(GatsbyImage)`\n  flex: 1 1 100%;\n  max-width: 800px;\n  background-size: cover;\n  background-repeat: no-repeat;\n`\n\nconst H2 = styled.h2`\n  margin: 0 0 1.625rem;\n`\n\n// const Header = styled.header`\n//   margin-top: 3rem;\n//   @media (max-width: 1280px) {\n//     margin-top: 8rem;\n//   }\n//   @media (max-width: 1160px) {\n//     margin-top: 7rem;\n//   }\n//   @media (max-width: ${(props) => props.theme.breakpoints.l}) {\n//     margin-top: 4rem;\n//   }\n//   @media (max-width: 920px) {\n//     margin-top: 2rem;\n//   }\n//   @media (max-width: 870px) {\n//     margin-top: 1rem;\n//   }\n//   @media (max-width: 840px) {\n//     margin-top: 0;\n//   }\n// `\n\n// const StyledCard = styled(Card)`\n//   flex: 1 1 30%;\n//   min-width: 240px;\n//   box-shadow: ${(props) => props.theme.colors.tableBoxShadow};\n//   margin: 1rem;\n//   padding: 1.5rem;\n//   @media (max-width: ${(props) => props.theme.breakpoints.l}) {\n//     flex: 1 1 30%;\n//   }\n\n//   &:hover {\n//     border-radius: 4px;\n//     box-shadow: 0px 8px 17px rgba(0, 0, 0, 0.15);\n//     background: ${(props) => props.theme.colors.tableBackgroundHover};\n//     transition: transform 0.1s;\n//     transform: scale(1.02);\n//   }\n// `\n\n// const StackContainer = styled(Content)`\n//   border: 1px solid ${(props) => props.theme.colors.border};\n//   border-radius: 4px;\n//   padding: 3rem 2rem;\n//   margin: 2rem;\n//   width: 96%;\n//   background: ${(props) => props.theme.colors.ednBackground};\n//   @media (max-width: ${(props) => props.theme.breakpoints.s}) {\n//     width: 100%;\n//     margin-left: 0rem;\n//     margin-right: 0rem;\n//     border-radius: 0px;\n//   }\n// `\n\n// TODO add remaining stack categories\n// const localblockchains = [\n//     {\n//       id: \"ganache\",\n//       url: \"https://www.trufflesuite.com/ganache\",\n//       background: \"#31272A\",\n//       name: \"Ganache\",\n//       description:\n//         \"A personal blockchain for Ethereum development you can use to deploy contracts, develop your applications, and run tests. It is available as both a desktop application as well as a command-line tool . Ganache is available for Windows, Mac, and Linux.\",\n//     },\n//     {\n//       id: \"ethnode\",\n//       url: \"https://github.com/vrde/ethnode\",\n//       background: \"#fff\",\n//       name: \"ethnode\",\n//       description:\n//         \"ethnode is a zero configuration tool to run a local Ethereum node. It supports both Openethereum and Geth clients.\",\n//     },\n//     {\n//       id: \"buidler\",\n//       url: \"https://buidler.dev/buidler-evm/\",\n//       background: \"#2A2C32\",\n//       name: \"Buidler EVM\",\n//       description:\n//         \"A local Ethereum network designed for development. It allows you to deploy your contracts, run your tests and debug your code.\",\n//     },\n//   ]\n\n//   const contractLanguages = [\n//     {\n//       id: \"solidity\",\n//       url: \"https://solidity.readthedocs.io/\",\n//       background: \"#fff\",\n//       name: \"Solidity\",\n//       description:\n//         \"Solidity, the Contract-Oriented Programming Language. Inspired by C++ and JavaScript.\",\n//     },\n//     {\n//       id: \"vyper\",\n//       url: \"https://vyper.readthedocs.io/en/stable/\",\n//       background: \"#fff\",\n//       name: \"Vyper\",\n//       description: \"Pythonic Smart Contract Language for the EVM\",\n//     },\n//   ]\n\n//   const ides = [\n//     {\n//       url:\n//       id: \"vscode\",\n//         \"https://marketplace.visualstudio.com/items?itemName=AzBlockchain.azure-blockchain\",\n//       background: \"#56338C\",\n//       name: \"VSCode Development Kit for Ethereum\",\n//       description:\n//         \"The extension simplifies how you create, build and deploy smart contracts on Ethereum ledgers.\",\n//     },\n//     {\n//       url:\n//       id: \"workbench\",\n//         \"https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft-azure-blockchain.azure-blockchain-workbench?tab=Overview\",\n//       background: \"#3079D0\",\n//       name: \"Azure Blockchain Workbench\",\n//       description:\n//         \"The Azure Blockchain Workbench is the fastest way to get started with blockchain on Azure.\",\n//     },\n//     {\n//       id: \"atom\",\n//       url: \"https://atom.io/packages/language-solidity\",\n//       background: \"#37373B\",\n//       name: \"Atom language-solidity plugin\",\n//       description: \"Adds syntax highlighting for Solidty in Atom.\",\n//     },\n//   ]\n\n//   const testinglibraries = [\n//     {\n//       id: \"waffle\",\n//       url: \"https://getwaffle.io/\",\n//       background: \"#fff\",\n//       name: \"Waffle\",\n//       description:\n//         \"Few dependencies, easy to extend syntax, and fast test execution. Used by over 500 projects.\",\n//     },\n//     {\n//       id: \"truffle\",\n//       url: \"https://trufflesuite.com\",\n//       background: \"#31272A\",\n//       name: \"Truffle\",\n//       description:\n//         \"Testing is included in the Truffle framework out-of-the-box.\",\n//     },\n//   ]\n\n//   const jslibraries = [\n//     {\n//       id: \"web3js\",\n//       url: \"http://web3js.readthedocs.io/\",\n//       background: \"#fff\",\n//       name: \"web3.js\",\n//       description:\n//         \"The Ethereum JavaScript API which connects to the Generic JSON-RPC spec.\",\n//     },\n//     {\n//       id: \"ethers\",\n//       url: \"https://docs.ethers.io/\",\n//       background: \"#26389A\",\n//       name: \"Ethers.js\",\n//       description:\n//         \"Complete Ethereum library and wallet implementation in JavaScript – supports Typescript\",\n//     },\n//   ]\n\ninterface IFramework {\n  id: string\n  url: string\n  githubUrl: string\n  background: string\n  name: string\n  description: TranslationKey\n  alt: TranslationKey\n  image?: IGatsbyImageData\n}\n\nconst frameworksList: Array<IFramework> = [\n  {\n    id: \"waffle\",\n    url: \"https://getwaffle.io/\",\n    githubUrl: \"https://github.com/EthWorks/waffle\",\n    background: \"#ffffff\",\n    name: \"Waffle\",\n    description: \"page-local-environment-waffle-desc\",\n    alt: \"page-local-environment-waffle-logo-alt\",\n  },\n  {\n    id: \"hardhat\",\n    url: \"https://hardhat.org/\",\n    githubUrl: \"https://github.com/nomiclabs/hardhat\",\n    background: \"#faf8fb\",\n    name: \"Hardhat\",\n    description: \"page-local-environment-hardhat-desc\",\n    alt: \"page-local-environment-hardhat-logo-alt\",\n  },\n  {\n    id: \"truffle\",\n    url: \"https://www.trufflesuite.com/\",\n    githubUrl: \"https://github.com/trufflesuite/truffle\",\n    background: \"#31272a\",\n    name: \"Truffle\",\n    description: \"page-local-environment-truffle-desc\",\n    alt: \"page-local-environment-truffle-logo-alt\",\n  },\n  {\n    id: \"embark\",\n    url: \"https://framework.embarklabs.io/\",\n    githubUrl: \"https://github.com/embarklabs/embark\",\n    background: \"#1b3e5f\",\n    name: \"Embark\",\n    description: \"page-local-environment-embark-desc\",\n    alt: \"page-local-environment-embark-logo-alt\",\n  },\n  {\n    id: \"brownie\",\n    url: \"https://github.com/eth-brownie/brownie\",\n    githubUrl: \"https://github.com/eth-brownie/brownie\",\n    background: \"#ffffff\",\n    name: \"Brownie\",\n    description: \"page-local-environment-brownie-desc\",\n    alt: \"page-local-environment-brownie-logo-alt\",\n  },\n  {\n    id: \"epirus\",\n    url: \"https://www.web3labs.com/epirus\",\n    githubUrl: \"https://github.com/web3labs/epirus-free\",\n    background: \"#ffffff\",\n    name: \"Epirus\",\n    description: \"page-local-environment-epirus-desc\",\n    alt: \"page-local-environment-epirus-logo-alt\",\n  },\n  {\n    id: \"createethapp\",\n    url: \"https://github.com/PaulRBerg/create-eth-app\",\n    githubUrl: \"https://github.com/PaulRBerg/create-eth-app\",\n    background: \"#ffffff\",\n    name: \"Create Eth App\",\n    description: \"page-local-environment-eth-app-desc\",\n    alt: \"page-local-environment-eth-app-logo-alt\",\n  },\n  {\n    id: \"scaffoldeth\",\n    url: \"https://github.com/austintgriffith/scaffold-eth\",\n    githubUrl: \"https://github.com/austintgriffith/scaffold-eth\",\n    background: \"#ffffff\",\n    name: \"scaffold-eth\",\n    description: \"page-local-environment-scaffold-eth-desc\",\n    alt: \"page-local-environment-scaffold-eth-logo-alt\",\n  },\n  {\n    id: \"soliditytemplate\",\n    url: \"https://github.com/paulrberg/solidity-template\",\n    githubUrl: \"https://github.com/paulrberg/solidity-template\",\n    background: \"#ffffff\",\n    name: \"Solidity template\",\n    description: \"page-local-environment-solidity-template-desc\",\n    alt: \"page-local-environment-solidity-template-logo-alt\",\n  },\n  {\n    id: \"foundry\",\n    url: \"https://getfoundry.sh/\",\n    githubUrl: \"https://github.com/foundry-rs/foundry\",\n    background: \"#ffffff\",\n    name: \"Foundry\",\n    description: \"page-local-environment-foundry-desc\",\n    alt: \"page-local-environment-foundry-logo-alt\",\n  },\n]\n\nconst ChooseStackPage = ({\n  data,\n}: PageProps<Queries.DevelopersLocalEnvironmentPageQuery, Context>) => {\n  const intl = useIntl()\n  const [frameworks, setFrameworks] = useState<Array<IFramework>>([])\n\n  useEffect(() => {\n    const list = shuffle(\n      frameworksList.map((item) => {\n        if (item.image) return item\n        item.image = getImage(data[item.id])\n        return item\n      })\n    )\n    setFrameworks(list)\n  }, [data])\n\n  return (\n    <StyledPage>\n      <PageMetadata\n        title={translateMessageId(\n          \"page-local-environment-setup-meta-title\",\n          intl\n        )}\n        description={translateMessageId(\n          \"page-local-environment-setup-meta-desc\",\n          intl\n        )}\n      />\n      <HeroContent>\n        <Slogan>\n          <Translation id=\"page-local-environment-setup-title\" />\n        </Slogan>\n        <SubSlogan>\n          <Translation id=\"page-local-environment-setup-subtitle\" />\n          <br />\n          <Translation id=\"page-local-environment-setup-subtitle-2\" />\n        </SubSlogan>\n      </HeroContent>\n      <Content>\n        <TwoColumnContent>\n          <Column>\n            <H2>\n              <Translation id=\"page-local-environment-frameworks-title\" />\n            </H2>\n            <p>\n              <Translation id=\"page-local-environment-frameworks-desc\" />\n            </p>\n            <p>\n              <Translation id=\"page-local-environment-framework-features\" />\n            </p>\n            <ul>\n              <li>\n                <Translation id=\"page-local-environment-framework-feature-1\" />\n              </li>\n              <li>\n                <Translation id=\"page-local-environment-framework-feature-2\" />\n              </li>\n              <li>\n                <Translation id=\"page-local-environment-framework-feature-3\" />\n              </li>\n              <li>\n                <Translation id=\"page-local-environment-framework-feature-4\" />\n              </li>\n              <li>\n                <Translation id=\"page-local-environment-framework-feature-5\" />\n              </li>\n            </ul>\n          </Column>\n          <Column>\n            <Hero\n              image={getImage(data.hero)!}\n              alt={translateMessageId(\"alt-eth-blocks\", intl)}\n              loading=\"eager\"\n            />\n          </Column>\n        </TwoColumnContent>\n        <CardGrid>\n          {frameworks.map((framework, idx) => (\n            <ProductCard\n              key={idx}\n              url={framework.url}\n              background={framework.background}\n              image={framework.image!}\n              name={framework.name}\n              githubUrl={framework.githubUrl}\n              repoLangCount={2}\n              alt={translateMessageId(framework.alt, intl)}\n            >\n              <Translation id={framework.description} />\n            </ProductCard>\n          ))}\n        </CardGrid>\n      </Content>\n      <Content>\n        <FeedbackCard />\n      </Content>\n      {/* <Content>\n        <h2>Create your own stack</h2>\n        <p>\n          Want to roll your own stack? Or looking to compare projects to\n          integrate into a framework / looking for a specific use case /\n          solution to a piece of your ? These categories will help you give the\n          full picture of options available for different layers of the stack.\n        </p>\n      </Content>\n      <StackContainer>\n        <Subtitle>Local development blockchain</Subtitle>\n        <p>\n          When creating a new smart contract, you definitely don't want to\n          deploy it straight to to Ethereum's public Mainnet (it costs money).\n          First, we recommend setting up a personal blockchain for local\n          development, where you can run tests & kick the tires on your dapp.\n        </p>\n        <CardGrid>\n          {localblockchains.map((local, idx) => {\n            return (\n              <ProductCard\n                key={idx}\n                url={local.url}\n                background={local.background}\n                image={local.image}\n                name={local.name}\n                description={local.description}\n              />\n            )\n          })}\n        </CardGrid>\n      </StackContainer>\n      <StackContainer>\n        <Subtitle>Smart contract languages (Optional)</Subtitle>\n        <p>\n          In order to write Ethereum smart contracts, you'll need to use a\n          language specifically build for the EVM. You don’t have to write a\n          smart contract to build a dapp, but if you want to create new\n          functionality, you’ll need to write your own.\n        </p>\n        <Link to=\"/developers/docs/smart-contracts/languages/\">\n          More on smart contract languages\n        </Link>\n        <CardGrid>\n          {contractLanguages.map((language, idx) => {\n            return (\n              <ProductCard\n                key={idx}\n                url={language.url}\n                background={language.background}\n                image={language.image}\n                name={language.name}\n                description={language.description}\n              />\n            )\n          })}\n        </CardGrid>\n      </StackContainer>\n      <StackContainer>\n        <Subtitle>Integrated Development Environments (IDEs)</Subtitle>\n        <p>\n          You need to write your smart contracts and code somewhere. Most\n          established IDEs have plugins for Solidity / Vyper syntax support.{\" \"}\n        </p>\n        <Link to=\"/developers/docs/ides/\">More on IDEs</Link>\n        <CardGrid>\n          {ides.map((ide, idx) => {\n            return (\n              <ProductCard\n                key={idx}\n                url={ide.url}\n                background={ide.background}\n                image={ide.image}\n                name={ide.name}\n                description={ide.description}\n              />\n            )\n          })}\n        </CardGrid>\n      </StackContainer>\n      <StackContainer>\n        <Subtitle>Smart contract testing libraries </Subtitle>\n        <p>\n          Tools to help write unit and integration tests for your smart\n          contracts, typically by using JavaScript. Note: most (if not all)\n          Ethereum developer frameworks come with smart contract testing out of\n          the box\n        </p>\n        <Link to=\"/developers/docs/ides/\">More on IDEs</Link>\n        <CardGrid>\n          {testinglibraries.map((library, idx) => {\n            return (\n              <ProductCard\n                key={idx}\n                url={library.url}\n                background={library.background}\n                image={library.image}\n                name={library.name}\n                description={library.description}\n              />\n            )\n          })}\n        </CardGrid>\n      </StackContainer>\n      <StackContainer>\n        <Subtitle>Frontend JavaScript libraries</Subtitle>\n        <p>Description</p>\n        <Link to=\"/developers/docs/apis/javascript/\">\n          More on JavaScript libraries\n        </Link>\n        <CardGrid>\n          {jslibraries.map((jslibrary, idx) => {\n            return (\n              <ProductCard\n                key={idx}\n                url={jslibrary.url}\n                background={jslibrary.background}\n                image={jslibrary.image}\n                name={jslibrary.name}\n                description={jslibrary.description}\n              />\n            )\n          })}\n        </CardGrid>\n        </StackContainer> */}\n    </StyledPage>\n  )\n}\nexport default ChooseStackPage\n\nexport const devtoolImage = graphql`\n  fragment devtoolImage on File {\n    childImageSharp {\n      gatsbyImageData(\n        height: 100\n        layout: FIXED\n        placeholder: BLURRED\n        quality: 100\n      )\n    }\n  }\n`\n\nexport const query = graphql`\n  query DevelopersLocalEnvironmentPage {\n    hero: file(relativePath: { eq: \"developers-eth-blocks.png\" }) {\n      childImageSharp {\n        gatsbyImageData(\n          width: 800\n          layout: CONSTRAINED\n          placeholder: BLURRED\n          quality: 100\n        )\n      }\n    }\n    ogImage: file(relativePath: { eq: \"developers-eth-blocks.png\" }) {\n      childImageSharp {\n        gatsbyImageData(\n          width: 1200\n          layout: FIXED\n          placeholder: BLURRED\n          quality: 100\n        )\n      }\n    }\n    hardhat: file(relativePath: { eq: \"dev-tools/hardhat.png\" }) {\n      ...devtoolImage\n    }\n    waffle: file(relativePath: { eq: \"dev-tools/waffle.png\" }) {\n      ...devtoolImage\n    }\n\n    truffle: file(relativePath: { eq: \"dev-tools/truffle.png\" }) {\n      ...devtoolImage\n    }\n    embark: file(relativePath: { eq: \"dev-tools/embark.png\" }) {\n      ...devtoolImage\n    }\n    brownie: file(relativePath: { eq: \"assets/eth-diamond-black.png\" }) {\n      ...devtoolImage\n    }\n    epirus: file(relativePath: { eq: \"dev-tools/epirus.png\" }) {\n      ...devtoolImage\n    }\n    createethapp: file(relativePath: { eq: \"assets/eth-diamond-black.png\" }) {\n      ...devtoolImage\n    }\n    scaffoldeth: file(relativePath: { eq: \"dev-tools/scaffoldeth.png\" }) {\n      ...devtoolImage\n    }\n    soliditytemplate: file(\n      relativePath: { eq: \"assets/eth-diamond-black.png\" }\n    ) {\n      ...devtoolImage\n    }\n    ganache: file(relativePath: { eq: \"dev-tools/ganache.png\" }) {\n      ...devtoolImage\n    }\n    ethnode: file(relativePath: { eq: \"assets/eth-diamond-black.png\" }) {\n      ...devtoolImage\n    }\n    solidity: file(relativePath: { eq: \"dev-tools/solidity.png\" }) {\n      ...devtoolImage\n    }\n    vyper: file(relativePath: { eq: \"dev-tools/vyper.png\" }) {\n      ...devtoolImage\n    }\n    vscode: file(relativePath: { eq: \"dev-tools/Vscode.png\" }) {\n      ...devtoolImage\n    }\n    workbench: file(relativePath: { eq: \"dev-tools/workbench.png\" }) {\n      ...devtoolImage\n    }\n    atom: file(relativePath: { eq: \"dev-tools/atom.png\" }) {\n      ...devtoolImage\n    }\n    web3js: file(relativePath: { eq: \"dev-tools/web3js.png\" }) {\n      ...devtoolImage\n    }\n    ethers: file(relativePath: { eq: \"dev-tools/ethers.png\" }) {\n      ...devtoolImage\n    }\n    foundry: file(relativePath: { eq: \"dev-tools/foundry.png\" }) {\n      ...devtoolImage\n    }\n  }\n`\n"],"names":["StyledPage","Page","target","name","styles","HeroContent","Content","props","theme","breakpoints","xl","Slogan","fonts","monospace","SubSlogan","colors","text200","TwoColumnContent","l","Column","m","Hero","GatsbyImage","H2","frameworksList","id","url","githubUrl","background","description","alt","_ref","data","intl","useIntl","frameworks","setFrameworks","useState","useEffect","list","_shuffle","map","item","image","getImage","___EmotionJSX","PageMetadata","title","translateMessageId","Translation","hero","loading","CardGrid","framework","idx","ProductCard","key","repoLangCount","FeedbackCard"],"sourceRoot":""}