{"version":3,"file":"component---src-pages-staking-index-tsx-ec3ed7f3130961f9473f.js","mappings":"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","sources":["webpack://ethereum-org-website/./src/components/ExpandableCard.tsx","webpack://ethereum-org-website/./src/components/PageHero.tsx","webpack://ethereum-org-website/./src/components/Staking/StakingHierarchy.tsx","webpack://ethereum-org-website/./src/components/Staking/StakingHomeTableOfContents.tsx","webpack://ethereum-org-website/./src/components/Staking/StakingStatsBox.tsx","webpack://ethereum-org-website/./src/components/Tooltip.tsx","webpack://ethereum-org-website/./src/utils/cache.ts"],"sourcesContent":["// Libraries\nimport React, { ComponentType, ReactNode, SVGProps, useState } from \"react\"\n\n// Components\nimport Translation from \"./Translation\"\n\n// Utils\nimport { trackCustomEvent } from \"../utils/matomo\"\nimport {\n  Accordion,\n  AccordionButton,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Heading,\n  Icon,\n  Text,\n} from \"@chakra-ui/react\"\n\nexport interface IProps {\n  children?: React.ReactNode\n  contentPreview?: ReactNode\n  title: ReactNode\n  svg?: typeof Icon\n  eventCategory?: string\n  eventName?: string\n}\n\nconst ExpandableCard: React.FC<IProps> = ({\n  children,\n  contentPreview,\n  title,\n  svg: Svg,\n  eventCategory = \"\",\n  eventName = \"\",\n}) => {\n  const [isVisible, setIsVisible] = useState(false)\n  const matomo = {\n    eventAction: `Clicked`,\n    eventCategory: `ExpandableCard${eventCategory}`,\n    eventName,\n  }\n  const onClick = () => {\n    // Card will not collapse if clicking on a link or selecting text\n    if (\n      window.getSelection()?.toString().length === 0 &&\n      !(window.event?.target as HTMLDivElement)?.className.includes(\n        \"ExternalLink\"\n      )\n    ) {\n      !isVisible && trackCustomEvent(matomo)\n      setIsVisible(!isVisible)\n    }\n  }\n\n  return (\n    <Accordion\n      border=\"1px solid\"\n      borderColor=\"border\"\n      borderRadius=\"sm\"\n      display=\"flex\"\n      flex-direction=\"column\"\n      marginBottom=\"4\"\n      cursor=\"pointer\"\n      _hover={{\n        backgroundColor: \"ednBackground\",\n      }}\n      borderBottomWidth=\"0\"\n      index={isVisible ? [0] : []}\n    >\n      <AccordionItem borderTopWidth=\"0\" flex=\"1\">\n        <Heading as=\"h3\" m={0}>\n          <AccordionButton\n            width=\"100%\"\n            p={6}\n            flex=\"1\"\n            onClick={onClick}\n            _hover={{\n              backgroundColor: \"ednBackground\",\n            }}\n          >\n            <Box\n              display=\"flex\"\n              width=\"100%\"\n              alignItems=\"center\"\n              flexDir={{ base: \"column\", sm: \"row\" }}\n            >\n              <Box\n                marginBottom={{ base: 2, sm: 0 }}\n                marginRight={{ base: 0, sm: 4 }}\n              >\n                <Box\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  sx={{\n                    svg: { marginRight: \"1.5rem\" },\n                  }}\n                  my=\"4\"\n                >\n                  {!!Svg && <Svg />}\n                  <Text fontSize=\"xl\" fontWeight=\"semibold\" flex=\"1\" m=\"0\">\n                    {title}\n                  </Text>\n                </Box>\n                <Text\n                  fontSize=\"sm\"\n                  color=\"text200\"\n                  marginBottom=\"0\"\n                  width=\"fit-content\"\n                >\n                  {contentPreview}\n                </Text>\n              </Box>\n              <Text\n                fontSize=\"md\"\n                color=\"primary\"\n                ml={{ base: undefined, sm: \"auto\" }}\n                mt=\"auto\"\n                mb=\"auto\"\n              >\n                <Translation id={isVisible ? \"less\" : \"more\"} />\n              </Text>\n            </Box>\n          </AccordionButton>\n        </Heading>\n        <AccordionPanel\n          paddingX=\"6\"\n          paddingBottom=\"6\"\n          paddingTop=\"0\"\n          onClick={onClick}\n        >\n          <Box\n            fontSize=\"md\"\n            color=\"text\"\n            paddingTop=\"6\"\n            borderTop=\"1px solid\"\n            borderColor=\"border\"\n          >\n            {children}\n          </Box>\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  )\n}\n\nexport default ExpandableCard\n","import React, { ReactNode } from \"react\"\nimport { Box, Flex, Heading, Wrap, WrapItem } from \"@chakra-ui/react\"\n\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\"\n\nimport ButtonLink, { IProps as IButtonLinkProps } from \"./ButtonLink\"\nimport Button, { IProps as IButtonProps } from \"./Button\"\n\nexport interface IButtonLink extends IButtonLinkProps {\n  content: ReactNode\n}\n\nexport interface IButton extends IButtonProps {\n  content: ReactNode\n}\n\nexport interface IContent {\n  buttons?: Array<IButtonLink | IButton>\n  title: ReactNode\n  header: ReactNode\n  subtitle: ReactNode\n  image: IGatsbyImageData\n  alt: string\n}\n\nexport interface IProps {\n  content: IContent\n  isReverse?: boolean\n  children?: ReactNode\n  className?: string\n}\n\nfunction isButtonLink(button: IButton | IButtonLink): button is IButtonLink {\n  return (button as IButtonLink).to !== undefined\n}\n\nconst PageHero: React.FC<IProps> = ({\n  content,\n  isReverse = false,\n  children,\n  className,\n}) => {\n  const { buttons, title, header, subtitle, image, alt } = content\n  return (\n    <Box py={4} px={8} width=\"full\">\n      <Flex\n        justifyContent=\"space-between\"\n        mt={8}\n        px={{ base: 0, lg: 16 }}\n        direction={{ base: isReverse ? \"column\" : \"column-reverse\", lg: \"row\" }}\n        className={className}\n      >\n        <Box\n          maxW={{ base: \"full\", lg: \"container.sm\" }}\n          py={{ base: 16, lg: 32 }}\n          pl={{ base: 0, lg: 8 }}\n          mr={4}\n        >\n          <Heading\n            as=\"h1\"\n            textTransform=\"uppercase\"\n            fontSize=\"md\"\n            fontWeight=\"normal\"\n            mb={4}\n            color=\"text300\"\n            lineHeight={1.4}\n          >\n            {title}\n          </Heading>\n          <Heading\n            as=\"h2\"\n            fontWeight=\"bold\"\n            fontSize={{ base: \"2.5rem\", lg: \"5xl\" }}\n            maxW=\"full\"\n            mb={0}\n            color=\"text00\"\n            lineHeight={1.4}\n          >\n            {header}\n          </Heading>\n          <Box\n            fontSize={{ base: \"xl\", lg: \"2xl\" }}\n            lineHeight={1.4}\n            color=\"text200\"\n            mt={4}\n            mb={8}\n          >\n            {subtitle}\n          </Box>\n          {buttons && (\n            <Wrap spacing={2}>\n              {buttons.map((button, idx) => {\n                if (isButtonLink(button)) {\n                  return (\n                    <WrapItem>\n                      <ButtonLink\n                        key={idx}\n                        variant={button.variant}\n                        to={button.to}\n                      >\n                        {button.content}\n                      </ButtonLink>\n                    </WrapItem>\n                  )\n                }\n\n                if (button.toId) {\n                  return (\n                    <WrapItem>\n                      <Button\n                        key={idx}\n                        variant={button.variant}\n                        toId={button.toId}\n                      >\n                        {button.content}\n                      </Button>\n                    </WrapItem>\n                  )\n                }\n              })}\n            </Wrap>\n          )}\n          {children}\n        </Box>\n        <Box\n          as={GatsbyImage}\n          flex=\"1 1 50%\"\n          alignSelf=\"center\"\n          mt={{ base: 0, lg: 12 }}\n          ml={{ base: 0, lg: 12 }}\n          w=\"full\"\n          maxWidth={{ base: \"560px\", lg: \"624px\" }}\n          image={image}\n          imgStyle={{\n            objectFit: \"contain\",\n          }}\n          alt={alt}\n          loading=\"eager\"\n        />\n      </Flex>\n    </Box>\n  )\n}\n\nexport default PageHero\n","// Libraries\nimport React, { ReactNode } from \"react\"\nimport {\n  Box,\n  calc,\n  Center,\n  cssVar,\n  Flex,\n  Heading,\n  Icon,\n  Show,\n  SimpleGrid,\n  useToken,\n  VStack,\n} from \"@chakra-ui/react\"\n\n// Components\nimport ButtonLink from \"../ButtonLink\"\nimport Translation from \"../Translation\"\n\n// SVG icons\nimport {\n  StakingGlyphCentralizedIcon,\n  StakingGlyphCloudIcon,\n  StakingGlyphCPUIcon,\n  StakingGlyphEtherCircleIcon,\n  StakingGlyphTokenWalletIcon,\n} from \"../icons/staking\"\n\n// Utils\nimport { trackCustomEvent } from \"../../utils/matomo\"\n\ntype ChildOnlyType = {\n  children: ReactNode\n}\n\nconst $colorVar = cssVar(\"color\")\nconst $nextColorVar = cssVar(\"next-color\")\nconst $fillColorVar = cssVar(\"fill-color\")\n\nconst SectionGrid: React.FC<{ number: number; children: ReactNode }> = ({\n  number,\n  children,\n}) => {\n  const colorValue = () => {\n    switch (number) {\n      case 1:\n        return \"colors.stakingGold\"\n      case 2:\n        return \"colors.stakingGreen\"\n      case 3:\n        return \"colors.stakingBlue\"\n      case 4:\n        return \"colors.stakingRed\"\n      default:\n        return \"#000000\"\n    }\n  }\n\n  const nextColorValue = () => {\n    switch (number) {\n      case 1:\n        return \"colors.stakingGreen\"\n      case 2:\n        return \"colors.stakingBlue\"\n      case 3:\n        return \"colors.stakingRed\"\n      case 4:\n        return \"#00000000\"\n      default:\n        return \"#000000\"\n    }\n  }\n\n  const fillColorValue = () => {\n    switch (number) {\n      case 1:\n        return \"colors.stakingGoldFill\"\n      case 2:\n        return \"colors.stakingGreenFill\"\n      case 3:\n        return \"colors.stakingBlueFill\"\n      case 4:\n        return \"colors.stakingRedFill\"\n      default:\n        return \"#000000\"\n    }\n  }\n\n  const asideScaleVal = 1.05 + number / 70\n  const asideTranslateVal = number + \"px\"\n\n  return (\n    <SimpleGrid\n      gap={{ base: 4, md: \"0 2rem\" }}\n      templateColumns={{ base: \"1fr\", md: \"5rem 1fr 5rem\" }}\n      templateAreas={{\n        base: `\n          \"ether\"\n          \"header\"\n          \"content\"\n        `,\n        md: `\n          \"ether header glyph\"\n          \"decorator content content\"\n        `,\n      }}\n      position=\"relative\"\n      sx={{\n        [$colorVar.variable]: colorValue(),\n        [$nextColorVar.variable]: nextColorValue(),\n        [$fillColorVar.variable]: fillColorValue(),\n        aside: {\n          _after: {\n            transform: `scale(${asideScaleVal}) translateY(${asideTranslateVal})`,\n          },\n        },\n      }}\n    >\n      {children}\n    </SimpleGrid>\n  )\n}\n\nconst StyledEtherSvg: React.FC<{ size: string }> = ({ size }) => (\n  <Center gridArea=\"ether\" zIndex={2} maxW={20} width=\"full\" mx=\"auto\">\n    <StakingGlyphEtherCircleIcon\n      boxSize={size}\n      color={$colorVar.reference}\n      sx={{\n        \"#transparentBackground\": {\n          fill: $fillColorVar.reference,\n        },\n      }}\n    />\n  </Center>\n)\n\nconst Line = () => {\n  // TODO: Remove after completion of the Chakra migration\n  const medBp = useToken(\"breakpoints\", \"md\")\n\n  return (\n    <Show above={medBp}>\n      <Box\n        as=\"aside\"\n        gridColumn={1}\n        gridRow=\"1 / 3\"\n        boxSize=\"100%\"\n        position=\"relative\"\n        _after={{\n          content: `\"\"`,\n          height: calc.subtract(\"100%\", \"50px\"),\n          borderImage: `linear-gradient(to bottom, ${$colorVar.reference}, ${$nextColorVar.reference}) 1 100%`,\n          borderLeft: \"4px\",\n          borderColor: \"orange\",\n          position: \"absolute\",\n          left: calc.subtract(\"50%\", \"2px\"),\n          top: \"50px\",\n          zIndex: 1,\n        }}\n      />\n    </Show>\n  )\n}\n\nconst Header = ({ children }: ChildOnlyType) => (\n  <Flex\n    gridArea=\"header\"\n    flexDirection=\"column\"\n    justify=\"center\"\n    alignItems={{ base: \"center\", md: \"initial\" }}\n    gap={2}\n  >\n    {children}\n  </Flex>\n)\n\nconst HeadingEl = ({ children }: ChildOnlyType) => (\n  <Heading\n    m={0}\n    color={$colorVar.reference}\n    fontSize=\"2rem\"\n    fontWeight={600}\n    lineHeight={1.4}\n    textAlign={{ base: \"center\", md: \"initial\" }}\n  >\n    {children}\n  </Heading>\n)\n\nconst Pills = ({ children }: ChildOnlyType) => (\n  <Flex\n    flexWrap=\"wrap\"\n    gap={1}\n    justify={{ base: \"center\", md: \"initial\" }}\n    sx={{\n      p: {\n        color: $colorVar.reference,\n        m: 0,\n        position: \"relative\",\n        py: 0.5,\n        px: 1.5,\n        whiteSpace: \"nowrap\",\n        _after: {\n          content: `\"\"`,\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          boxSize: \"100%\",\n          background: $colorVar.reference,\n          opacity: 0.125,\n          borderRadius: \"sm\",\n        },\n      },\n    }}\n  >\n    {children}\n  </Flex>\n)\n\nconst Glyph = ({ glyphIcon }: { glyphIcon: typeof Icon }) => {\n  const Icon = glyphIcon\n  return (\n    <Center gridArea={{ base: \"content\", md: \"glyph\" }}>\n      <Icon\n        boxSize={{ base: \"50%\", md: \"50px\" }}\n        color={$colorVar.reference}\n        opacity={{ base: 0.1, md: \"initial\" }}\n      />\n    </Center>\n  )\n}\n\nconst Content = ({ children }: ChildOnlyType) => (\n  <Box\n    gridArea=\"content\"\n    mt={{ md: 4 }}\n    mb={{ md: 12 }}\n    sx={{\n      // For use in markdown files\n      \".gold\": {\n        color: \"stakingGold\",\n        fontWeight: 600,\n      },\n    }}\n  >\n    {children}\n  </Box>\n)\n\nexport interface IProps {}\n\nconst StakingHierarchy: React.FC<IProps> = () => {\n  const [stakingGold, stakingGreen, stakingBlue, stakingRed] = useToken(\n    \"colors\",\n    [\"stakingGold\", \"stakingGreen\", \"stakingBlue\", \"stakingRed\"]\n  )\n\n  return (\n    <VStack\n      bgGradient=\"linear(rgba(237, 194, 84, 0.1) 13.39%, rgba(75, 231, 156, 0.1) 44.21%, rgba(231, 202, 200, 0.1) 82.88%)\"\n      borderRadius={{ base: 0, md: \"lg\" }}\n      spacing={{ base: 16, md: 0 }}\n      p={8}\n      borderLeft={{ base: \"4px\", md: \"none\" }}\n      borderRight={0}\n      sx={{\n        borderImage: `linear-gradient(to bottom, ${stakingGold} 5%, ${stakingGreen} 30%, ${stakingBlue} 55%, ${stakingRed} 80%) 1 100%`,\n      }}\n    >\n      <SectionGrid number={1}>\n        <StyledEtherSvg size=\"100%\" />\n        <Line />\n        <Header>\n          <HeadingEl>\n            <Translation id=\"page-staking-hierarchy-solo-h2\" />\n          </HeadingEl>\n          <Pills>\n            <p>\n              <em>\n                <Translation id=\"page-staking-hierarchy-solo-pill-1\" />\n              </em>\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-solo-pill-2\" />\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-solo-pill-3\" />\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-solo-pill-4\" />\n            </p>\n          </Pills>\n        </Header>\n        <Glyph glyphIcon={StakingGlyphCPUIcon} />\n        <Content>\n          <p>\n            <Translation id=\"page-staking-hierarchy-solo-p1\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-solo-p2\" />\n          </p>\n          <ButtonLink\n            to=\"/staking/solo/\"\n            onClick={() => {\n              trackCustomEvent({\n                eventCategory: `StakingHierarchy`,\n                eventAction: `Clicked`,\n                eventName: \"clicked solo staking\",\n              })\n            }}\n            width={{ base: \"100%\", md: \"auto\" }}\n          >\n            <Translation id=\"page-staking-more-on-solo\" />\n          </ButtonLink>\n        </Content>\n      </SectionGrid>\n      <SectionGrid number={2}>\n        <StyledEtherSvg size=\"90%\" />\n        <Line />\n        <Header>\n          <HeadingEl>\n            <Translation id=\"page-staking-dropdown-saas\" />\n          </HeadingEl>\n          <Pills>\n            <p>\n              <Translation id=\"page-staking-hierarchy-saas-pill-1\"></Translation>\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-saas-pill-2\"></Translation>\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-saas-pill-3\"></Translation>\n            </p>\n          </Pills>\n        </Header>\n        <Glyph glyphIcon={StakingGlyphCloudIcon} />\n        <Content>\n          <p>\n            <Translation id=\"page-staking-hierarchy-saas-p1\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-saas-p2\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-saas-p3\" />\n          </p>\n          <ButtonLink\n            to=\"/staking/saas/\"\n            onClick={() => {\n              trackCustomEvent({\n                eventCategory: `StakingHierarchy`,\n                eventAction: `Clicked`,\n                eventName: \"clicked staking as a service\",\n              })\n            }}\n            width={{ base: \"100%\", md: \"auto\" }}\n          >\n            <Translation id=\"page-staking-more-on-saas\" />\n          </ButtonLink>\n        </Content>\n      </SectionGrid>\n      <SectionGrid number={3}>\n        <StyledEtherSvg size=\"80%\" />\n        <Line />\n        <Header>\n          <HeadingEl>\n            <Translation id=\"page-staking-dropdown-pools\" />\n          </HeadingEl>\n          <Pills>\n            <p>\n              <Translation id=\"page-staking-hierarchy-pools-pill-1\" />\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-pools-pill-2\" />\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-pools-pill-3\" />\n            </p>\n            <p>\n              <em>\n                <Translation id=\"page-staking-hierarchy-pools-pill-4\" />\n              </em>\n            </p>\n          </Pills>\n        </Header>\n        <Glyph glyphIcon={StakingGlyphTokenWalletIcon} />\n        <Content>\n          <p>\n            <Translation id=\"page-staking-hierarchy-pools-p1\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-pools-p2\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-pools-p3\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-pools-p4\" />\n          </p>\n          <ButtonLink\n            to=\"/staking/pools/\"\n            onClick={() => {\n              trackCustomEvent({\n                eventCategory: `StakingHierarchy`,\n                eventAction: `Clicked`,\n                eventName: \"clicked pooled staking\",\n              })\n            }}\n            width={{ base: \"100%\", md: \"auto\" }}\n          >\n            <Translation id=\"page-staking-more-on-pools\" />\n          </ButtonLink>\n        </Content>\n      </SectionGrid>\n      <SectionGrid number={4}>\n        <StyledEtherSvg size=\"70%\" />\n        <Line />\n        <Header>\n          <HeadingEl>\n            <Translation id=\"page-staking-hierarchy-cex-h2\" />\n          </HeadingEl>\n          <Pills>\n            <p>\n              <em>\n                <Translation id=\"page-staking-hierarchy-cex-pill-1\" />\n              </em>\n            </p>\n            <p>\n              <Translation id=\"page-staking-hierarchy-cex-pill-2\" />\n            </p>\n          </Pills>\n        </Header>\n        <Glyph glyphIcon={StakingGlyphCentralizedIcon} />\n        <Content>\n          <p>\n            <Translation id=\"page-staking-hierarchy-cex-p1\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-cex-p2\" />\n          </p>\n          <p>\n            <Translation id=\"page-staking-hierarchy-cex-p3\" />\n          </p>\n        </Content>\n      </SectionGrid>\n    </VStack>\n  )\n}\n\nexport default StakingHierarchy\n","import React from \"react\"\nimport { Link as GatsbyLink } from \"gatsby\"\nimport { Box, List, ListItem } from \"@chakra-ui/react\"\nimport Link from \"../Link\"\n\ninterface Item {\n  id: string\n  title: string\n}\n\ninterface ITableOfContentsLinkProps {\n  item: Item\n}\n\nconst TableOfContentsLink: React.FC<ITableOfContentsLinkProps> = ({\n  item: { id, title },\n}) => {\n  const url = `#${id}`\n\n  return (\n    <Link\n      as={GatsbyLink}\n      to={url}\n      position=\"relative\"\n      display=\"inline-block\"\n      color=\"text300\"\n      // `li :last-child` global selector wants to override this without `!important`\n      mb=\"0.5rem !important\"\n    >\n      {title}\n    </Link>\n  )\n}\n\nexport interface IProps {\n  items: Array<Item>\n}\n\nconst StakingHomeTableOfContents: React.FC<IProps> = ({ items }) => {\n  if (!items) return null\n\n  return (\n    <Box as=\"nav\" p={0} textAlign=\"right\" mb={8} overflowY=\"auto\">\n      <List fontSize=\"xl\" lineHeight={1.6} fontWeight={400} ps={4} pe={1} m={0}>\n        {items.map((item, index) => (\n          <ListItem key={index} m={0}>\n            <div>\n              <TableOfContentsLink item={item} />\n            </div>\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  )\n}\n\nexport default StakingHomeTableOfContents\n","// Import libraries\nimport React, { useState, useEffect, ReactNode } from \"react\"\nimport { MdInfoOutline } from \"react-icons/md\"\nimport { useIntl } from \"react-intl\"\nimport { Code, Flex, Icon, Spinner, VStack } from \"@chakra-ui/react\"\n// Import components\nimport Translation from \"../Translation\"\nimport Tooltip from \"../Tooltip\"\nimport Link from \"../Link\"\n// Import utilities\nimport { Lang } from \"../../utils/languages\"\nimport { getData } from \"../../utils/cache\"\nimport { getLocaleForNumberFormat } from \"../../utils/translations\"\n\n// Constants\nconst NA_ERROR = \"n/a\"\nconst ZERO = \"0\"\nconst MAX_EFFECTIVE_BALANCE = 32\n\nconst Cell: React.FC<{ children: ReactNode }> = ({ children }) => {\n  return (\n    <VStack\n      spacing={2}\n      py={4}\n      px={8}\n      borderLeft={{ md: \"1px\" }}\n      borderTop={{ base: \"1px\", md: \"none\" }}\n      // `!important` needed to force an override of the user-agent\n      borderColor=\"preBorder !important\"\n      _first={{\n        borderLeft: \"none\",\n        borderTop: \"none\",\n      }}\n    >\n      {children}\n    </VStack>\n  )\n}\n\nconst Value: React.FC<{ children: ReactNode; title: string }> = ({\n  children,\n  title,\n}) => {\n  return (\n    <Code\n      title={title}\n      fontWeight=\"bold\"\n      fontSize=\"2rem\"\n      background=\"none\"\n      color=\"primary\"\n      p={0}\n    >\n      {children}\n    </Code>\n  )\n}\n\nconst Label: React.FC<{ children: ReactNode }> = ({ children }) => {\n  return (\n    <Flex alignItems=\"center\" textTransform=\"uppercase\" fontSize=\"sm\">\n      {children}\n    </Flex>\n  )\n}\n\n// BeaconchainTooltip component\nconst BeaconchainTooltip = ({ isEthStore }: { isEthStore?: boolean }) => (\n  <Tooltip\n    content={\n      <div>\n        <Translation id=\"data-provided-by\" />{\" \"}\n        {isEthStore && (\n          <Link to=\"https://github.com/gobitfly/eth.store/\">ETH.STORE, </Link>\n        )}\n        <Link to=\"https://beaconcha.in\">Beaconcha.in</Link>\n      </div>\n    }\n  >\n    <Icon\n      as={MdInfoOutline}\n      color=\"text\"\n      marginInlineStart={2}\n      _hover={{ color: \"primary\" }}\n      _active={{ color: \"primary\" }}\n      _focus={{ color: \"primary\" }}\n      boxSize={4}\n    />\n  </Tooltip>\n)\n\n// Interfaces\nexport interface IProps {}\n\n// StatsBox component\nconst StakingStatsBox: React.FC<IProps> = () => {\n  const intl = useIntl()\n  /**\n   * State variables:\n   * - ZERO is default string, \"0\", representing loading state\n   * - null is error state\n   */\n  const [totalEth, setTotalEth] = useState<string | null>(ZERO)\n  const [totalValidators, setTotalValidators] = useState<string | null>(ZERO)\n  const [currentApr, setCurrentApr] = useState<string | null>(ZERO)\n\n  useEffect(() => {\n    const localeForStatsBoxNumbers = getLocaleForNumberFormat(\n      intl.locale as Lang\n    )\n\n    // Helper functions\n    const formatInteger = (amount: number): string =>\n      new Intl.NumberFormat(localeForStatsBoxNumbers).format(amount)\n\n    const formatPercentage = (amount: number): string =>\n      new Intl.NumberFormat(localeForStatsBoxNumbers, {\n        style: \"percent\",\n        minimumSignificantDigits: 2,\n        maximumSignificantDigits: 2,\n      }).format(amount)\n\n    // API call, data formatting, and state setting\n    ;(async () => {\n      try {\n        const {\n          data: { apr, effective_balances_sum_wei },\n        } = await getData<{\n          data: { apr: number; effective_balances_sum_wei: number }\n        }>(\"https://beaconcha.in/api/v1/ethstore/latest\")\n        const totalEffectiveBalance: number = effective_balances_sum_wei * 1e-18\n        const valueTotalEth = formatInteger(Math.floor(totalEffectiveBalance))\n        const valueTotalValidators = formatInteger(\n          totalEffectiveBalance / MAX_EFFECTIVE_BALANCE\n        )\n        const valueCurrentApr = formatPercentage(apr)\n        setTotalEth(valueTotalEth)\n        setTotalValidators(valueTotalValidators)\n        setCurrentApr(valueCurrentApr)\n      } catch (error) {\n        setTotalEth(null)\n        setCurrentApr(null)\n        setTotalValidators(null)\n      }\n    })()\n  }, [intl.locale])\n\n  return (\n    <Flex direction={{ base: \"column\", md: \"row\" }}>\n      <Cell>\n        {totalEth === ZERO ? (\n          <Spinner />\n        ) : (\n          <Value title={totalEth ? \"\" : NA_ERROR}>{totalEth || NA_ERROR}</Value>\n        )}\n        <Label>\n          <Translation id=\"page-staking-stats-box-metric-1\" />\n          <BeaconchainTooltip />\n        </Label>\n      </Cell>\n      <Cell>\n        {totalValidators === ZERO ? (\n          <Spinner />\n        ) : (\n          <Value title={totalValidators ? \"\" : NA_ERROR}>\n            {totalValidators || NA_ERROR}\n          </Value>\n        )}\n        <Label>\n          <Translation id=\"page-staking-stats-box-metric-2\" />\n          <BeaconchainTooltip />\n        </Label>\n      </Cell>\n      <Cell>\n        {currentApr === ZERO ? (\n          <Spinner />\n        ) : (\n          <Value title={currentApr ? \"\" : NA_ERROR}>\n            {currentApr || NA_ERROR}\n          </Value>\n        )}\n        <Label>\n          <Translation id=\"page-staking-stats-box-metric-3\" />\n          <BeaconchainTooltip isEthStore />\n        </Label>\n      </Cell>\n    </Flex>\n  )\n}\n\nexport default StakingStatsBox\n","import React, { ReactNode, useState } from \"react\"\nimport { Box, useColorModeValue } from \"@chakra-ui/react\"\nimport * as utils from \"../utils/isMobile\"\n\nexport interface IProps {\n  content: ReactNode\n  children?: React.ReactNode\n}\n\n// TODO add `position` prop\nconst Tooltip: React.FC<IProps> = ({ content, children }) => {\n  const [isVisible, setIsVisible] = useState<boolean>(false)\n  const isMobile = utils.isMobile()\n  const shadow = useColorModeValue(\"tableBox.light\", \"tableBox.dark\")\n\n  return (\n    <>\n      {isVisible && isMobile && (\n        // Invisible full screen div \"below\" the clickable link\n        // Added so clicking away anywhere will hide Tooltip\n        <Box\n          position=\"fixed\"\n          top={0}\n          left={0}\n          w=\"full\"\n          h=\"full\"\n          zIndex={1}\n          onClick={() => setIsVisible(false)}\n        />\n      )}\n      <Box\n        position=\"relative\"\n        display=\"inline-flex\"\n        userSelect=\"none\"\n        cursor=\"pointer\"\n        title=\"More info\"\n        onMouseEnter={!isMobile ? () => setIsVisible(true) : undefined}\n        onMouseLeave={!isMobile ? () => setIsVisible(false) : undefined}\n        onClick={isMobile ? () => setIsVisible(!isVisible) : undefined}\n      >\n        {children}\n        {isVisible && (\n          <Box\n            textAlign=\"center\"\n            whiteSpace=\"normal\"\n            w={{ base: \"140px\", md: \"200px\" }}\n            color=\"text\"\n            bg=\"background\"\n            boxShadow={shadow}\n            position=\"absolute\"\n            zIndex=\"docked\"\n            py={4}\n            px={2}\n            textTransform=\"none\"\n            fontSize=\"sm\"\n            fontWeight=\"medium\"\n            cursor=\"default\"\n            borderRadius=\"base\"\n            bottom=\"125%\"\n            left=\"25%\"\n            transform=\"translateX(-50%)\"\n          >\n            <Box\n              as=\"span\"\n              position=\"absolute\"\n              bottom={-2}\n              left=\"calc(50% - 6px)\"\n              borderRightWidth={10}\n              borderRightStyle=\"solid\"\n              borderRightColor=\"transparent\"\n              borderTopWidth={10}\n              borderTopStyle=\"solid\"\n              borderTopColor=\"background\"\n              borderLeftWidth={10}\n              borderLeftStyle=\"solid\"\n              borderLeftColor=\"transparent\"\n            />\n            {content}\n          </Box>\n        )}\n      </Box>\n    </>\n  )\n}\n\nexport default Tooltip\n","import axios from \"axios\"\n\nconst ONE_HOUR = 1000 * 60 * 60\n\nexport interface CacheStorage<T> {\n  value: T\n  timestamp: number\n}\n\nconst emptyCacheItemStorage: CacheStorage<string> = {\n  value: \"\",\n  timestamp: 0,\n}\n\nconst stringifyEmptyCacheItemStorage = JSON.stringify(emptyCacheItemStorage)\n\n/**\n * Write inside the local storage the value returned by the API call for a given key\n * @param {string} key stored in the local storage\n * @param {T} value for a given key to write in the local storage\n */\nexport const writeToCache = <T>(key: string, value: T): void => {\n  const cacheStorageItem: CacheStorage<T> = {\n    value,\n    timestamp: new Date().getTime(),\n  }\n  localStorage.setItem(key, JSON.stringify(cacheStorageItem))\n}\n\n/**\n * Retrieve the value stored in the local storage for a given key\n * If the value is not defined or the key does not exist, return a default CacheStorage\n * with an empty value and timestamp set to 0\n * @see CacheStorage\n * @param {string} key stored in the local storage\n * @returns {CacheStorage<T>} element stored in browser local storage\n */\nconst readFromCache = <T>(key: string): CacheStorage<T> => {\n  return JSON.parse(\n    localStorage.getItem(key) || stringifyEmptyCacheItemStorage\n  ) as CacheStorage<T>\n}\n\n/**\n * API call to get the response data and store in the local storage if needed\n * @param {string} url API url\n * @param {boolean} cacheResponse should we store the value to the local storage\n * @returns {T} data response from the API\n */\nexport const getFreshData = async <T>(\n  url: string,\n  cacheResponse: boolean = false\n): Promise<T> => {\n  const { data } = await axios.get(url)\n  cacheResponse && writeToCache(url, data)\n  return data\n}\n\nconst getCachedData = <T>(url: string): CacheStorage<T> => readFromCache(url)\n\n/**\n * Get the data response from the local storage or the API\n * @param {string} url of the API\n * @returns {T} data from the API or the local storage\n */\nexport const getData = async <T>(url: string): Promise<T> => {\n  const cachedData: CacheStorage<T> = getCachedData(url)\n  const now = new Date().getTime()\n  if (\n    cachedData &&\n    cachedData.timestamp > 0 &&\n    now - cachedData.timestamp < ONE_HOUR\n  ) {\n    return cachedData.value\n  } else {\n    return getFreshData(url, true)\n  }\n}\n"],"names":["_ref","children","contentPreview","title","svg","Svg","eventCategory","eventName","isVisible","setIsVisible","useState","matomo","eventAction","onClick","window","getSelection","_window$getSelection","toString","length","event","_window$event","target","_window$event$target","className","includes","trackCustomEvent","___EmotionJSX","Accordion","border","borderColor","borderRadius","display","marginBottom","cursor","_hover","backgroundColor","borderBottomWidth","index","AccordionItem","borderTopWidth","flex","Heading","as","m","AccordionButton","width","p","Box","alignItems","flexDir","base","sm","marginRight","sx","my","Text","fontSize","fontWeight","color","ml","undefined","mt","mb","Translation","id","AccordionPanel","paddingX","paddingBottom","paddingTop","borderTop","content","isReverse","buttons","header","subtitle","image","alt","py","px","Flex","justifyContent","lg","direction","maxW","pl","mr","textTransform","lineHeight","Wrap","spacing","map","button","idx","to","isButtonLink","WrapItem","ButtonLink","key","variant","toId","Button","GatsbyImage","alignSelf","w","maxWidth","imgStyle","objectFit","loading","$colorVar","cssVar","$nextColorVar","$fillColorVar","SectionGrid","number","asideScaleVal","asideTranslateVal","SimpleGrid","gap","md","templateColumns","templateAreas","position","variable","colorValue","nextColorValue","fillColorValue","aside","_after","transform","StyledEtherSvg","_ref2","size","Center","gridArea","zIndex","mx","StakingGlyphEtherCircleIcon","boxSize","reference","fill","Line","medBp","useToken","Show","above","gridColumn","gridRow","height","calc","borderImage","borderLeft","left","top","Header","_ref3","flexDirection","justify","HeadingEl","_ref4","textAlign","Pills","_ref5","flexWrap","whiteSpace","background","opacity","Glyph","_ref6","glyphIcon","Icon","Content","_ref7","stakingGold","stakingGreen","stakingBlue","stakingRed","VStack","bgGradient","borderRight","StakingGlyphCPUIcon","StakingGlyphCloudIcon","StakingGlyphTokenWalletIcon","StakingGlyphCentralizedIcon","TableOfContentsLink","item","url","Link","GatsbyLink","items","overflowY","List","ps","pe","ListItem","NA_ERROR","ZERO","Cell","_first","Value","Code","Label","BeaconchainTooltip","isEthStore","Tooltip","MdInfoOutline","marginInlineStart","_active","_focus","intl","useIntl","totalEth","setTotalEth","totalValidators","setTotalValidators","currentApr","setCurrentApr","useEffect","localeForStatsBoxNumbers","getLocaleForNumberFormat","locale","formatInteger","amount","Intl","NumberFormat","format","data","apr","effective_balances_sum_wei","getData","totalEffectiveBalance","valueTotalEth","Math","floor","valueTotalValidators","valueCurrentApr","style","minimumSignificantDigits","maximumSignificantDigits","error","Spinner","isMobile","utils","shadow","useColorModeValue","h","userSelect","onMouseEnter","onMouseLeave","bg","boxShadow","bottom","borderRightWidth","borderRightStyle","borderRightColor","borderTopStyle","borderTopColor","borderLeftWidth","borderLeftStyle","borderLeftColor","stringifyEmptyCacheItemStorage","JSON","stringify","value","timestamp","getFreshData","async","cacheResponse","axios","cacheStorageItem","Date","getTime","localStorage","setItem","writeToCache","getCachedData","readFromCache","parse","getItem","cachedData","now"],"sourceRoot":""}